

// var ModNist = require('../import/nist')
var log = require('../log').build("importcve");
var CVE_CTRL = require('../controller/cve_ctrl');

var CVE_IMPORT_CTRL = require("../controller/cve_import_ctrl");
var APP = require("../app");

var ERR = require("../errno");
var COMMON = require("../common");

const PARAM_REQ = 'req';
const PARAM_ID = 'id';
const PARAM_DOWNLOAD = 'download';

const PARAM_DOWNLOAD_VUL_INFO = 'vulinfo';

module.exports.handleReq = function(req, res, next){
    log.d("handle get req");
    log.d("render")
    var reqId = null;
    var download = null;
    if (req.query.hasOwnProperty(PARAM_ID)){
        reqId = req.query[PARAM_ID];
    }
    if (req.query.hasOwnProperty(PARAM_DOWNLOAD)){
        download = req.query[PARAM_DOWNLOAD];
    }

    if (reqId){
        CVE_IMPORT_CTRL.getImportInfo(reqId, function(retCode, importItem){
            if (retCode == ERR.ErrNone){
                var item = CVE_IMPORT_CTRL.buildImportReq();
                item.id = importItem.importId;
                item.workingDir = importItem.workingDir;
                CVE_IMPORT_CTRL.readImportSummarize(item, function(retCode, data){
                    var summarize = "";
                    if (retCode == ERR.ErrNone){
                        summarize = data;
                    }
                    else{
                        summarize = "Read summarize file failed";
                    }

                    res.render('importinfo', {
                        importId:importItem.importId,
                        source:importItem.source,
                        createDate:COMMON.getTimeString(importItem.createDate),
                        workingDir:importItem.workingDir,
                        importStatus:importItem.importStatus,
                        summarize:summarize
                    });
                })
                
            }
            else{

            }
        })
        
    }
    else{
        res.render('importcve');
    }

}


module.exports.handlePost = function(req, res, next){
    log.d("handle post req");
    log.d("upload file");
    var reqId = null;
    if (req.query.hasOwnProperty(PARAM_REQ)){
        log.d(`Try to get req id from param ${PARAM_REQ}`);
        // log.dumpDict(req.query);
        // console.log(req);
        reqId = req.query[PARAM_REQ];
    }

    log.d(`reqId ${reqId}`);
    if ((reqId == null) || (reqId == undefined)){
        APP.uploadfile(req,res, 'cve', function(err) {
            if(err) {
                var ret_msg = `Error uploading file: ${err}`;
                log.e(ret_msg);
                return APP.responseMsg(res, ERR.ErrFailed, ret_msg);
                // return res.end("Error uploading file.");
            }
            log.i(`Upload file ok, filepath ${res.req.file.path}`);
            // res.status(200).json({success:"analyzing"});
            // ModNist.parse(res.req.file.path);
            var req = CVE_IMPORT_CTRL.importCve(res.req.file.path, "nist", function(req){
                log.d(`Import cve callback`);
            });

            log.d(`Response import request ${CVE_IMPORT_CTRL.importReqString(req)}`);
            res.json({
                reqId:req.id,
                status:req.state,
            })
        });
    }
    else{
        var req = CVE_IMPORT_CTRL.getImportReq(reqId);
        if (req != null){
            log.d(`Req infor of import req ${reqId} ${CVE_IMPORT_CTRL.importReqString(req)}`);
            res.json({
                reqId:req.id,
                status:req.state,
                result:req.result,
            })
        }
        else{
            var retMsg = `Import Req id ${reqId} not found`;
            log.e(retMsg);
            APP.responseMsg(res, ERR.ErrNotFound, retMsg);
        }
    }
    
}

module.exports.ROUTE_NAME = "importcve"