/**
 * Copyright (C) 2022 Anh Huy Ngo - All Rights Reserved
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * Author: Anh Ngo
 * Created Date: 
 */


 'use strict';
////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////


var COMMON = require("../../common");

var PROJECT_DB = require("../../model/project/project_db");
var MODULE_CTRL = require("../../controller/module_ctrl");
var CVE_CTRL = require("../../controller/cve_ctrl");
var CVE_IMPORT_CTRL = require("../../controller/cve_import_ctrl");
var TAG_CTRL = require("../../controller/tags_ctrl");
var CVE_LIST_ROUTE = require("../cvelist");
var APP = require("../../app");
var ERR = require("../../errno");
var CONST = require("../../const");
var DB = require('../../db/db');
var UUID = require('uuid');
const { Query } = require("mongoose");
////////////////////////////////////////////////////////

////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////

var log = require("../../log").build("admin_vullist");

const PARAM_ACTION = 'action';
const PARAM_QUERY_ID = 'queryid';
const PARAM_PAGE = 'page';
const PARAM_PERPAGE = 'perpage';
const PARAM_SEARCH_KEY = 'key';
const PARAM_SEARCH_CONDITION = 'cond';
const PARAM_SEARCH_IN = 'in'; // cve, module, project, etc.
const PARAM_FILTER_PRJ = 'prj'; // use with search in
const PARAM_FILTER_COMP = 'comp';
const PARAM_FILTER_MODULE = 'mod';
const PARAM_FILTER_CVE = 'cve';
const PARAM_FILTER_SRC = 'src';
const PARAM_FILTER_TAG = 'tag';
const PARAM_FILTER_IMPORT = 'import';
const PARAM_SEARCH_FIELD = 'field'; // i.e. id, moduleId, etc.
const PARAM_SEARCH_FIELD_ID = 'id'; // i.e. id, moduleId, etc.
const PARAM_SEARCH_FIELD_NAME = 'name'; // i.e. id, moduleId, etc.
const PARAM_SEARCH_FIELD_TAG = 'tag'; // i.e. id, moduleId, etc.
const PARAM_SEARCH_FIELD_VULID = 'vulid'; // i.e. id, moduleId, etc.

const PARAM_ACTION_UPDATE_CVE = "edit";

var ParamList=[
    PARAM_PAGE
    ,PARAM_PERPAGE
    ,PARAM_ACTION
    ,PARAM_QUERY_ID
    ,PARAM_SEARCH_CONDITION
    ,PARAM_SEARCH_KEY
    ,PARAM_SEARCH_IN
    ,PARAM_FILTER_PRJ
    ,PARAM_FILTER_COMP
    ,PARAM_FILTER_COMP
    ,PARAM_FILTER_MODULE
    ,PARAM_FILTER_CVE
    ,PARAM_FILTER_SRC
    ,PARAM_FILTER_TAG
    ,PARAM_FILTER_IMPORT
    ,PARAM_SEARCH_FIELD
];

const DEFAULT_PER_PAGE = 5;

var QueryCollections = {};

const QUERY_TIMEOUT_SEC = 60*5;
const QUERY_TIMEOUT_MSEC = QUERY_TIMEOUT_SEC * 1000;


const UPDATE_ACTION_PROJECT = "project";
const UPDATE_ACTION_MODULE = "module";
const UPDATE_ACTION_TAG = "tag";
const UPDATE_ACTION_STATUS = "status";
const UPDATE_ACTION_PJ_STATUS = "pjstatus";

const UPDATE_ACTION_SET = "set";
const UPDATE_ACTION_ADD = "add";
const UPDATE_ACTION_DEL = "del";
const UPDATE_ACTION_UPDATE = "update";
const UPDATE_ACTION_DEL_ALL = "delall";
const SUPPORT_UPDATE_ACTIONS = [UPDATE_ACTION_UPDATE, UPDATE_ACTION_SET, UPDATE_ACTION_ADD, UPDATE_ACTION_DEL, UPDATE_ACTION_DEL_ALL];


const SUPPORT_STATUS = {
    [DB.STATUS_NEW]: "New",
    [DB.STATUS_INACTIVE]: "InActive",
    [DB.STATUS_ACTIVE]: "Active",
}


const SUPPORT_VUL_PJ_STATUS = {
    [CONST.VUL_PRJ_STATUS_NEW]: "New",
    [CONST.VUL_PRJ_STATUS_OPEN]: "Open",
    [CONST.VUL_PRJ_STATUS_CHECKING]: "Checking",
    [CONST.VUL_PRJ_STATUS_SKIP]: "Skipped",
    [CONST.VUL_PRJ_STATUS_PATCHED]: "Patched",
    [CONST.VUL_PRJ_STATUS_CLOSED]: "Closed",
}

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////

// In case of admin, it'll support to edit multiple/bulk of Vul/CVEs, therefore, need to cache query result 
// for editing bulk of Vul/CVE
// If not cache, we'll face difficulty when edit, as we don't know which vul/cve need to modify
// at client side, it supports paging, therefore, it just keep a part of query data, not all
// Transfering all query info to client will consume much bandwidth
// Therefore, I cached query info in server, for editing later
// To reduce memory consumption, I just keep id of vul only, and try to query detail of vul later
// it's not good for performance, I know, but it works. I'll try to find another solution, when I have time
// FIXME: fix me please

/**
 * Cache query info, for later processing
 * @param {*} idList 
 * @param {*} queryId 
 * @returns 
 */
function addQueryCacheItem(idList, queryId = null){
    log.d(`addQueryCacheItem`);
    if ((queryId == null) || (!QueryCollections.hasOwnProperty(queryId)))
    {
        log.d(`Generate query id`);
        queryId = UUID.v1();
    }
        
    log.d(`Query id ${queryId}`);
    var currentTime = COMMON.currentTimeMs();
    var expireTime = currentTime + QUERY_TIMEOUT_MSEC;
    log.d(`currentTime ${currentTime}`);
    log.d(`expireTime ${expireTime}`);
    log.d(`delta ${expireTime-currentTime}`);
    QueryCollections[queryId] = {
        queryId:queryId,
        createTime:currentTime,
        expireTime:expireTime,
        idList:idList,
    }
    // TODO: auto cleanup?????
    return queryId;
}

function extendQueryCacheExpiredTime(queryId){
    log.d(`extendQueryCacheExpiredTime ${queryId}`);
    if (QueryCollections.hasOwnProperty(queryId)){
        QueryCollections[queryId].expireTime = COMMON.currentTimeMs()+QUERY_TIMEOUT_MSEC;
    }
}
/**
 * Get query info
 * @param {*} queryId 
 * @returns 
 */
function getQueryCacheItem(queryId){
    log.d(`getQueryCacheItem ${queryId}`);
    if (QueryCollections.hasOwnProperty(queryId)){
        var item = QueryCollections[queryId];
        var currentTime = COMMON.currentTimeMs();
        log.d(`currentTime ${currentTime}`);
        log.d(`expireTime ${item.expireTime}`);
        log.d(`delta ${currentTime - item.expireTime}`);
        if (item.expireTime > currentTime){
            log.d("got query info")
            return item;
        }
        else{ // expiration
            log.e(`query id ${queryId} expired`);
            delete QueryCollections[queryId];
        }
        // TODO: check to clean up???
    }
    else{
        log.e(`Not found query id ${queryId}`);
    }
    return null;
}

/**
 * Extract search condition
 * @param {*} condition 
 * @returns 
 */
function extractSearchCondition(condition){
    log.d(`extractSearchCondition ${condition}`);
    var searchKeyList = [];
    var searchKeyStr = "";
    var searchIn = "";
    var searchField = "";
    if (!COMMON.isEmpty(condition)){
        [searchKeyStr, searchIn, searchField] = condition.split('|');
        if (!COMMON.isEmpty(searchKeyStr)){
            searchKeyList = searchKeyStr.split(',');
        }
    }
    
    
    log.d(`searchKeyStr ${searchKeyStr}`);
    log.d(`searchIn ${searchIn}`);
    log.d(`searchField ${searchField}`);
    
    var cond = {
        searchKeys:searchKeyList,
        searchIn:searchIn,
        searchField:searchField
    }
    // console.log(cond);
    return cond;
}

/**
 * Handle search result
 * @param {*} res 
 * @param {*} page 
 * @param {*} perpage 
 * @param {*} cves 
 * @param {*} total 
 * @param {*} queryId 
 */
function handleSearchResult(res, page, perpage, cves, total, queryId=null){
    log.d(`handleSearchResult`);
    
    var idx = (page - 1)*perpage + 1;
    var totalpages = (total/perpage + (total%perpage == 0?0:1)) | 0;
    log.d(`total ${total} perpage ${perpage} totalpages ${totalpages}, idx ${idx}, number items ${cves.length}`);
    res.json({
        totalpages:totalpages,
        page:page,
        startIdx:idx,
        total:total,
        queryId:queryId,
        cves:cves.map(function(cve){
            log.dumpArray(cve.modules, `Module list of ${cve.vul_number}`);
            return {
                idx:idx++,
                id:cve.id,
                vul_number:cve.vul_number,
                cve_number:cve.cve_number,
                desc:cve.getDesc(),
                ref:cve.getRef(),
                tags:cve.tag,
                source:cve.source,
                modules:cve.modules,
                projects:cve.projects,
                importId:cve.importId,
                status:{
                    id:cve.status,
                    name:`${SUPPORT_STATUS[cve.status]}(${cve.status})`
                },
                vulstatus:{
                    id:cve.vulStatus,
                    name:`${SUPPORT_VUL_PJ_STATUS[cve.vulStatus]}(${cve.vulStatus})`
                },
            }})                    
    });
}

/**
 * Handle POST request of searching
 * @param {*} req 
 * @param {*} res 
 * @param {*} next 
 */
function handlePostSearchCond(req, res, next){
    log.d(`handlePostSearchCond`);

    var page = 1;
    var perpage = DEFAULT_PER_PAGE;
    var queryId = null;
    if (req.query.hasOwnProperty(PARAM_PAGE)){
        page = req.query[PARAM_PAGE];
    }
    // if (req.query.hasOwnProperty(PARAM_QUERY_ID)){
    //     queryId = req.query[PARAM_QUERY_ID];
    // }
    
    log.raw(req.body);
    if (COMMON.isValidObj(req.body) && COMMON.isValidObj(req.body.queryId)){
        queryId = req.body.queryId;
    }


    // TODO: implement perpage later, temporary fix 50 items per page
    // if (req.query.hasOwnProperty(PARAM_PERPAGE)){
    //     perpage = req.query[PARAM_PERPAGE];
    // }
    log.d(`page ${page} perpage ${perpage}`);


    var searchConditions=null; // format: keyword|<in, like project>|<field, like ID>

    
    if (req.query.hasOwnProperty(PARAM_SEARCH_CONDITION)){
        searchConditions = req.query[PARAM_SEARCH_CONDITION];
    }
    else{
        searchConditions = "|cve|";
    }
    var searchConditionList = [];
    log.d(`searchConditions ${searchConditions}`);
    if (Array.isArray(searchConditions)){
        searchConditions.forEach(element => {
            searchConditionList.push(extractSearchCondition(element));
        });
    }
    else{
        searchConditionList.push(extractSearchCondition(searchConditions));
    }
    
    var reqPage = page;

    // TRY TO QUERY ALL CVES/VULS, NOT PAGING, STORE INFORMATION (VUL ID) to CACHE, ASSIGN TO AN QUERY ID
    // Paging shall be done in memory, not in db
    var requests = [];
    var doQuery = true;
    if (COMMON.isValidObj(queryId))
    {
        log.d(`Got query id ${queryId}`);
        var queryInfo = getQueryCacheItem(queryId);
        if (COMMON.isValidObj(queryInfo)){
            log.d(`Try to get IdList from cache`);
            requests.push(new Promise((resolve, reject) => {
                resolve(queryInfo.idList);
            }))
            doQuery = false;
        }
        else{
            log.e(`Query id exist, but invalid query data`);
        }
    }
    
    // if query exists in cache, not query again, try to get from cache
    if (doQuery){

        log.d(`Not found query info from cached, query again`);
        requests = searchConditionList.map(cond => {
            return new Promise((resolve, reject) => {
                var searchIn = cond.searchIn;
                var searchField = cond.searchField;
                var searchKey = cond.searchKeys;
                log.d(`searchIn: ${searchIn}`);
                log.d(`searchField: ${searchField}`);
                log.d(`searchKey: ${searchKey}`);
                switch (searchIn){
                    case PARAM_FILTER_PRJ:

                        if (searchField == PARAM_SEARCH_FIELD_ID){
                            log.d(`Get CVE list by project id ${searchKey}`);
                            CVE_CTRL.getVulIdByProjectId(searchKey).then((idList) => {
                                log.d(`Get CVE list by project callback`);
                                resolve(idList);
                            });
                        }
                        // else if (searchField == PARAM_SEARCH_FIELD_NAME){

                        // }
                        // else if (searchField == PARAM_SEARCH_FIELD_TAG){

                        // }
                        // else if (searchField == PARAM_SEARCH_FIELD_VULID){

                        // }
                        else{
                            reject(COMMON.buildError(`Not support project field ${searchField}`, ERR.ErrInvalid));
                        }
                        break;
                    case PARAM_FILTER_MODULE:

                        if (searchField == PARAM_SEARCH_FIELD_ID){
                            log.d(`Get CVE list by module id ${searchKey}`)
                            CVE_CTRL.getVulIdByModuleId(searchKey).then((idList) => {
                                log.d(`Get CVE list by module callback`);
                                resolve(idList);
                            });
                        }
                        else{
                            reject(COMMON.buildError(`Not support module field ${searchField}`, ERR.ErrInvalid));
                        }
                        break;
                    case PARAM_FILTER_CVE:
                        log.d(`Get CVE List all by keyword ${searchKey}`);
                        CVE_CTRL.getVulIdByKeyword(searchKey).then((idList) => {
                            log.d(`Get CVE list by keyword callback, found ${idList.length}`);
                            resolve(idList);
                        })
                        .catch((err) => {
                            reject(err);
                        })
                        ;
                    
                        break;
                    case PARAM_FILTER_IMPORT:

                        log.d(`Get CVE List all by import ${searchKey}`);
                        CVE_CTRL.getVulIdByImport(searchKey).then((idList) => {
                            log.d(`Get CVE list by import callback`);
                            resolve(idList);
                        })
                        .catch((err) => {
                            reject(err);
                        })
                        ;
                    
                        break;
                    default:
                        reject(COMMON.buildError(`Not support field ${searchIn}`, ERR.ErrInvalid));
                        break;
                }
            });
        });
    }
    else{
        log.d(`Get query result from cache, query id ${queryId}`);
    }
    Promise.allSettled(requests)
        .then((results) => {
            var cveList = {};
            var total = 0;
            var totalpages = 0;
            var totalFound = 0;
            var totalSkip = 0;
            var idx = 0;
            var length = results.length;
            var cves = [];
            log.d(`handle post allSettled, length ${length}`);
            if (length == 1){
                if (results[0].status == "rejected"){
                    log.e(`Reject`);
                    var [msg, code, data] = COMMON.parseError(results[0].reason);
                    APP.responseMsg(res, code, msg);
                    return;
                }
                else{
                    // console.log(results[0].value);
                    return results[0].value;
                    // [cves, total, totalpages] = DB.extractQueryResult(results[0].value)
                }
            }
            else{
                for (idx = 0; idx < length; idx++){
                    log.d(`Result ${idx}: ${results[idx].status}`);
                    if (results[idx].status == "rejected"){
                        log.e(`Reject`);
                        var [msg, code, data] = COMMON.parseError(results[idx].reason);
                        APP.responseMsg(res, code, msg);
                        return;

                    }
                    else{
                        var cves = results[idx].value;
                        if (!COMMON.isEmpty(cves))
                        {
                            if (idx == 0){
                                log.d(`1st time, dict empty`);
                                
                                cves.forEach(element => {

                                    log.d(`add ${element} to list`);
                                    cveList[element] = element;
                                    total += 1;
                                });
                                
                                totalFound = total;
                            }
                            else{
                                var tmpList = {};
                                cves.forEach(element => {

                                    totalFound += 1;
                                    if (!cveList.hasOwnProperty(element)){
                                        log.d(`Not exist ${element}, delete it`);
                                        delete cveList[element];
                                        total -= 1;
                                        totalSkip += 1;
                                    }
                                    else{
                                        log.d(`exist ${element}, keep it`);
                                        tmpList[element] = element;
                                    }
                                });
                                cveList = tmpList;
                            }
                        }
                        else{
                            cveList = {};
                            total = 0;
                            break;
                        }
                        
                    }
                }
                // TODO: may consume a lots of memory. Optimize: search result should contain id of vul only, and query detail later.
                // TODO: need to balance between memory consumption and performance.
                // var allcves = Object.values(cveList);
                // var startIdx = (page - 1)*perpage;
                // var endIdx = startIdx + perpage;
                // log.d(`startIdx ${startIdx}`);
                // log.d(`endIdx ${endIdx}`);
                // // log.d(`total ${total}`);
                // cves = allcves.slice(startIdx, endIdx < total?endIdx:total);
                // totalpages = (total/perpage + 1) | 0;
                return Object.values(cveList);
            }
            // log.d(`total ${total}`);
            // log.d(`totalpages ${totalpages}`);
            // // log.d(`totalFound ${totalFound}`);
            // // log.d(`totalSkip ${totalSkip}`);
            // // log.dumpDict(cveList, "cveList");
            // handleSearchResult(res, page, perpage, cves, total);

        })
        .then((idList) => {
            var total = idList.length;
            if (total > 0){
                queryId = addQueryCacheItem(idList, queryId);
            }
            
            var startIdx = (page - 1)*perpage;
            var endIdx = startIdx + perpage;
            log.d(`total ${total}`);
            log.d(`startIdx ${startIdx}`);
            log.d(`endIdx ${endIdx}`);
            // log.d(`total ${total}`);
            var cves = idList.slice(startIdx, endIdx < total?endIdx:total);

            var cverequest = cves.map(id => {
                log.d(`Query cve info for id ${id}`);
                return CVE_CTRL.getCVE(id);
            });
            Promise.allSettled(cverequest)
                .then((results) => {
                    var cveList = [];
                    results.forEach(result => {
                        if (result.status == "rejected"){
                            log.e(`Reject`);
                            var [msg, code, data] = COMMON.parseError(result.reason);
                            APP.responseMsg(res, code, msg);
                            return;
                        }
                        else{
                            log.d(`Got cve info ${result.value.toString()}`);
                            cveList.push(result.value);
                        }
                    });

                    handleSearchResult(res, page, perpage, cveList, total, queryId);
                })
                ;


        })
        .catch((err) => {
            var [msg, code, data] = COMMON.parseError(err);
            APP.responseMsg(res, code, msg);
        })
        
        ;
 

}

const ACTION_HANDLING = {
    [PARAM_ACTION_UPDATE_CVE]:handleEditCVE
}

/**
 * Edit Bulk of Vul/CVE
 * @param {*} req 
 * @param {*} res 
 * @param {*} next 
 * @returns 
 */
function handleEditCVE(req, res, next){
    log.d(`handleEditCVE`);
    var jitem = req.body;
    log.raw(req.body);
    /**
     * Body:
     * {
     * queryId: id of query in cache. Must do query before editing
     * isAll: edit all Vuls or not
     * skipIdList: list of Vul ids which are skipped on this edit
     * idList: list of ids which are impact by this edit. skip this if isAll is set
     * field: Modified field, like project, module, etc
     * action: modified action, like add, append, delete, etc
     * projects: list of project ids
     * modules: list of module, in format name[:version]
     * tags: list of tags
     * status: db status of item
     * pjStatus: vul-prj status
     * }
     * 
     */
    if (COMMON.isValidObj(jitem)){
        // edit cve need query id information
        if (COMMON.isValidObj(jitem.queryId)){
            log.d(`Query id ${jitem.queryId}`);
            var queryInfo = getQueryCacheItem(jitem.queryId);
            if (COMMON.isValidObj(queryInfo)){

                var isAll = COMMON.isValidObj(jitem.isAll)?jitem.isAll:false;
                
                log.d(`isAll ${isAll}`);

                var skipIdList = COMMON.isValidObj(jitem.skipIdList)?jitem.skipIdList:[];
                
                log.raw(skipIdList, "skipIdList");
                

                var idList = COMMON.isValidObj(jitem.idList)?jitem.idList:[];
                log.raw(idList, "idList");

                var field = COMMON.isValidObj(jitem.field)?jitem.field:null;
                log.d(`field ${field}`);
                // var data = COMMON.isValidObj(jitem.data)?jitem.data:null;
                var action = COMMON.isValidObj(jitem.action)?jitem.action:null;
                log.d(`action ${action}`);
                

                var projects = COMMON.isValidObj(jitem.projects)?jitem.projects:null;
                log.raw(projects, "projects");
                // // var delProjects = COMMON.isValidObj(jitem.delProjects)?jitem.delProjects:null;
                var modules = COMMON.isValidObj(jitem.modules)?jitem.modules:null;
                log.raw(modules, "modules");
                // // var delModules = COMMON.isValidObj(jitem.delModules)?jitem.delModules:null;
                var tags = COMMON.isValidObj(jitem.tags)?jitem.tags:null;
                log.raw(tags, "tags");
                // // var delTags = COMMON.isValidObj(jitem.delTags)?jitem.delTags:null;
                var status = COMMON.isValidObj(jitem.status)?jitem.status:null;
                log.d(`status ${status}`);
                var pjStatus = COMMON.isValidObj(jitem.pjStatus)?jitem.pjStatus:null;
                log.d(`pjStatus ${pjStatus}`);

                var updateIdList = [];

                var ret = ERR.ErrNone;
                var retMsg = "OK";
                // TODO: validate more input data
                if (field == UPDATE_ACTION_PROJECT)
                {
                    if (COMMON.isEmpty(projects) && (pjStatus == null)){
                        ret = ERR.ErrInvalid;
                        retMsg = `Empty Projects`;
                    }
                    if ((pjStatus != null) && (!Object.keys(SUPPORT_VUL_PJ_STATUS).includes(pjStatus))){

                        ret = ERR.ErrInvalid;
                        retMsg = `Status ${pjStatus} not support`;
                    }
                }
                else if (field == UPDATE_ACTION_TAG)
                {
                    if (action != UPDATE_ACTION_DEL_ALL &&  COMMON.isEmpty(tags)){
                        ret = ERR.ErrInvalid;
                        retMsg = `Empty Tags`;
                    }
                }

                if (ret == ERR.ErrNone){
                    if (isAll) // edit all queried Vuls, skipp only selected one
                    {
                        idList = queryInfo.idList;
                        // get all queried Vul id, and remove skipped one
                        idList.forEach(id => {
                            var objId = DB.toObjId(id);
                            // if (!(skipIdList.includes(id) || ((objId != null) && (skipIdList.includes(objId)))))
                            if (!(skipIdList.includes(`${id}`)))
                            {
                                log.d(`Add id ${id}`)
                                updateIdList.push(id);
                            }
                            else{
                                log.d(`Skip id ${id}`)
                            }
                        });
                        
                    }
                    else{
                        updateIdList = idList;
                    }
                    log.raw(updateIdList, "updateIdList");

                    if (COMMON.isEmpty(updateIdList)){
                        APP.responseMsg(res, ERR.ErrNoData, `No vul`);
                        return;
                    }
    
                    var updateReqs = [];
                    updateIdList.forEach(id => {
                        log.d(`Field ${field}, action ${action}`);
                        // update project
                        if (field == UPDATE_ACTION_PROJECT){
                            if (action == UPDATE_ACTION_ADD)
                                updateReqs.push(CVE_CTRL.addVulProjects(id, projects, pjStatus));
                            else if (action == UPDATE_ACTION_SET)
                                updateReqs.push(CVE_CTRL.setVulProjects(id, projects, pjStatus));
                            else if  (action == UPDATE_ACTION_DEL)
                                updateReqs.push(CVE_CTRL.delVulProjects(id, projects));
                            else if  (action == UPDATE_ACTION_UPDATE)
                                updateReqs.push(CVE_CTRL.updateVulPrjStatus(id, projects, pjStatus));
                            else{
                                log.e(`${field}, ${action} no support`);
                            }
                        }
                        
                        // update module
                        if (field == UPDATE_ACTION_MODULE){
                            if (action == UPDATE_ACTION_ADD)
                                updateReqs.push(CVE_CTRL.addVulModules(id, modules));
                            else if (action == UPDATE_ACTION_SET)
                                updateReqs.push(CVE_CTRL.setVulModules(id, modules));
                            else if  (action == UPDATE_ACTION_DEL)
                                updateReqs.push(CVE_CTRL.delVulModules(id, modules));
                            else{
                                log.e(`${field}, ${action} no support`);
                            }
                        }
                        // update tags
                        if (field == UPDATE_ACTION_TAG){
                            if (action == UPDATE_ACTION_ADD)
                                updateReqs.push(CVE_CTRL.addVulTags(id, tags, true));
                            else if (action == UPDATE_ACTION_SET)
                                updateReqs.push(CVE_CTRL.setVulTags(id, tags, true));
                            else if  (action == UPDATE_ACTION_DEL)
                                updateReqs.push(CVE_CTRL.delVulTags(id, tags));
                            else if  (action == UPDATE_ACTION_DEL_ALL)
                                updateReqs.push(CVE_CTRL.setVulTags(id, []));
                            else{
                                log.e(`${field}, ${action} no support`);
                            }
                        }
    
                        //update status of vul
                        if (field == UPDATE_ACTION_STATUS){
                            if (action == UPDATE_ACTION_SET)
                                updateReqs.push(CVE_CTRL.updateVulStatus(id, status));
                            else{
                                log.e(`${field}, ${action} no support`);
                            }
                        }
    
                        // if (field == UPDATE_ACTION_PJ_STATUS){
                        //     if (action == UPDATE_ACTION_SET)
                        //         updateReqs.push(CVE_CTRL.updateVulPrjStatus(id, projects, pjStatus));
                        //     else{
                        //         log.e(`${field}, ${action} no support`);
                        //     }
                        // }
                    });
                    
                    
                    
                    Promise.all(updateReqs)
                        .then(()=>{
                            log.i(`Updating Vul info finished`)
                            APP.responseMsg(res, ERR.ErrNone, `Update finished`);
                        })
                        .catch(err => {
                            log.e(`Handle edit action failed, update failed ${err}`);
                            APP.responseMsg(res, ERR.ErrNotFound, `Updat info failed`);
                        })
                        ;
                }
                else{
                    APP.responseMsg(res, ret, retMsg);
                }
                


            }
            else{ // lack of query info
                log.e(`Handle edit action failed, query id not found ${jitem.queryId}`);
                APP.responseMsg(res, ERR.ErrNotFound, `query id not found ${jitem.queryId}`);
            }
        }
        else{ // lack of query id
            log.e(`Handle edit action failed, miss query id`);
            APP.responseMsg(res, ERR.ErrNotFound, `miss query id`);
        }
    }    
    else{ // lack of data
        log.e(`Handle edit action failed, invalid body`);
        APP.responseMsg(res, ERR.ErrNotFound, `Invalid data`);
    }
}

/**
 * Handle POST request for editing CVEs/Vuls
 * @param {*} req 
 * @param {*} res 
 * @param {*} next 
 */
function handlePostActionReq(req, res, next){
    var action = req.query[PARAM_ACTION];
    log.d(`handlePostActionReq ${action}`);
    if (ACTION_HANDLING.hasOwnProperty(action)){
        ACTION_HANDLING[action](req, res, next);
    }
    else{
        log.e(`Handle action failed, invalid ${action}`);
        APP.responseMsg(res, ERR.ErrNotFound, `Invalid action ${action}`);
    }

}

/**
 * Handle GET request
 * @param {*} req 
 * @param {*} res 
 * @param {*} next 
 */
function handleReq(req, res, next){
    log.d("handleReq");

    CVE_LIST_ROUTE.queryFilterInfo().then(queryInfo => {
        res.render('admin_vullist', {
            projects:queryInfo.projects.map(function(item){
                return {
                    id:item.id,
                    name:item.name
                }
            }),

            modules:queryInfo.modules.map(function(item){
                return {
                    id:item.id,
                    name:item.name
                }
            }),

            imports:queryInfo.imports.map(function(item){
                return {
                    id:item.id,
                    importId:item.importId,
                    importIdShort:item.importId.substr(0,7),
                    name:item.title
                }
            }),


            tags:Object.values(TAG_CTRL.getVulTags()),

            status:Object.keys(SUPPORT_STATUS).map(ele=>{
                return {
                    id:ele,
                    name:SUPPORT_STATUS[ele]
                }
            }),
            vulstatus:Object.keys(SUPPORT_VUL_PJ_STATUS).map(ele=>{
                return {
                    id:ele,
                    name:SUPPORT_VUL_PJ_STATUS[ele]
                }
            }),
        });
    })
    
}

/**
 * Handle POST request
 * @param {*} req 
 * @param {*} res 
 * @param {*} next 
 */
function handlePost(req, res, next){
    log.d("handlePost");
    if (req.query.hasOwnProperty(PARAM_ACTION)){
        handlePostActionReq(req, res, next);
    }
    else{
        handlePostSearchCond(req, res, next);
    }

    
}

////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////
module.exports.handleReq = handleReq;
module.exports.handlePost = handlePost;
module.exports.ROUTE_NAME = "admin/vullist";