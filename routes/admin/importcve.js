/**
 * Copyright (C) 2022 Anh Huy Ngo - All Rights Reserved
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * Author: Anh Ngo
 * Created Date: 
 */


 'use strict';
////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////


var CVE_CTRL = require('../../controller/cve_ctrl');

var CVE_IMPORT_CTRL = require("../../controller/cve_import_ctrl");
var APP = require("../../app");

var ERR = require("../../errno");
var COMMON = require("../../common");
var CONFIG = require("../../config");

const FORMIDABLE = require('formidable');

var PROJECT_CTRL = require("../../controller/project_ctrl");
var MODULE_CTRL = require("../../controller/module_ctrl");

////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////

var log = require('../../log').build("importcve");

const PARAM_REQ = 'req';
const PARAM_IMPORT_ID = 'importid';
const PARAM_DOWNLOAD = 'download';
const PARAM_REQ_INFO = 'info';
const PARAM_REQ_STATUS = 'status';
const PARAM_REQ_IMPORT = 'import';


const PARAM_DOWNLOAD_VUL_INFO = 'vulinfo';

const SOURCE_LIST = {
    [CVE_IMPORT_CTRL.IMPORT_NIST]: "NIST (json)"
}

const DEBUG = CONFIG.DEBUG;
////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////

// /importcev?id=xxx&download=xxx

function handleReq(req, res, next){
    if (DEBUG) log.d("handle get req");
    
    var reqId = null;
    var download = null;
    if (req.query.hasOwnProperty(PARAM_IMPORT_ID)){
        reqId = req.query[PARAM_IMPORT_ID];
    }
    if (req.query.hasOwnProperty(PARAM_DOWNLOAD)){
        download = req.query[PARAM_DOWNLOAD];
    }

    if (reqId){
        CVE_IMPORT_CTRL.getImportInfo(reqId, function(retCode, importItem){
            if (retCode == ERR.ErrNone){
                var item = CVE_IMPORT_CTRL.buildImportReq();
                item.id = importItem.importId;
                item.workingDir = importItem.workingDir;
                CVE_IMPORT_CTRL.readImportSummarize(item, function(retCode, data){
                    var summarize = "";
                    if (retCode == ERR.ErrNone){
                        summarize = data;
                    }
                    else{
                        summarize = "Read summarize file failed";
                    }

                    res.render('importinfo', {
                        importId:importItem.importId,
                        source:importItem.source,
                        createDate:COMMON.getTimeString(importItem.createDate),
                        workingDir:importItem.workingDir,
                        importStatus:importItem.importStatus,
                        summarize:summarize
                    });
                })
                
            }
            else{

            }
        })
        
    }
    else{
        var projects = [];
        var modules = [];
        new Promise((resolve, reject)=>{
            PROJECT_CTRL.getListProjects(function(retCode, items){
                resolve(items);
            });
        })
        .then(items => {
            items.forEach(element => projects.push(element));
            return MODULE_CTRL.getList();
        })
        .then(items => {
            items.forEach(element => modules.push(element));
            res.render('admin_importcve', {
                sources:Object.keys(SOURCE_LIST).map(key=>{
                    return {
                        id:key,
                        name:SOURCE_LIST[key]
                    }
                }),
                projects:projects.map(function(item){
                    return {
                        id:item.id,
                        name:item.name
                    }
                }),

                modules:modules.map(function(item){
                    return {
                        id:item.id,
                        name:item.name
                    }
                })
            });
        })
        .catch(err => {
            
        })
        ;
        

        
    }

}

function handlePost(req, res, next){
    if (DEBUG) log.d("handle post req");
    
    var reqCmd = null;
    var reqId = null;
    if (req.query.hasOwnProperty(PARAM_IMPORT_ID)){
        reqId = req.query[PARAM_IMPORT_ID];
    }
    if (req.query.hasOwnProperty(PARAM_REQ)){
        if (DEBUG) log.d(`Try to get req id from param ${PARAM_REQ}`);
        // log.dumpDict(req.query);
        // console.log(req);
        reqCmd = req.query[PARAM_REQ];
    }

    if (DEBUG) log.d(`reqId ${reqId}`);
    if (DEBUG) log.d(`reqCmd ${reqCmd}`);
    
    if (!COMMON.isValidObj(reqCmd)) {
        var ret_msg = `Invalid command`;
        log.e(ret_msg);
        return APP.responseMsg(res, ERR.ErrInvalid, ret_msg);
    }

    if (reqCmd == PARAM_REQ_IMPORT){
        // upload file
        APP.uploadfile(req,res, 'importFile', function(err) {
            if(err) {
                var ret_msg = `Error uploading file: ${err}`;
                log.e(ret_msg);
                return APP.responseMsg(res, ERR.ErrFailed, ret_msg);
                
            }
            if (DEBUG) log.raw(res.req.body);
            var title = "";
            var source = "";
            var modules = [];
            var projectids = [];
            if (COMMON.isValidObj(res.req.body.opSource)){
                source = res.req.body.opSource;
            }
            if (COMMON.isValidObj(res.req.body.txtTitle)){
                title = res.req.body.txtTitle;
            }
            if (COMMON.isValidObj(res.req.body.modules) && !COMMON.isEmpty(res.req.body.modules)){
                modules = res.req.body.modules.split(',');
            }
            if (COMMON.isValidObj(res.req.body.opPrj) && !COMMON.isEmpty(res.req.body.opPrj)){
                if (Array.isArray(res.req.body.opPrj))
                    projectids = res.req.body.opPrj;
                else{
                    projectids.push(res.req.body.opPrj);
                }
            }
            // console.log(Array.isArray(modules));
            // console.log(modules);
            if (DEBUG) log.dumpArray(projectids, "projects");
            if (DEBUG) log.dumpArray(modules, "modules");
            if (DEBUG) log.d(`Title ${title}`);
            if (DEBUG) log.d(`source ${source}`);

            
            if (COMMON.isValidObj(res.req.file))
            {
                log.i(`Upload file ok, filepath ${res.req.file.path}`);
                var prjValid = true;
                
                
                var requests = projectids.map(element => {
                    return new Promise((resolve, reject) => {
                        PROJECT_CTRL.checkIfProjectIdExist(element, function(ret, result){
                            log.d(`check project ${ret}, ${result}`);
                            prjValid &= result;
                            resolve(result);
                        });
                    })
                    
                });

                Promise.all(requests).then(() => {
                    log.d(`Result ${prjValid}`);
                    if (prjValid){                                           
                        return MODULE_CTRL.addModules(modules);
                    }
                    else{
                        var ret_msg = `Invalid project id`;
                        log.e(ret_msg);
                        APP.responseMsg(res, ERR.ErrInvalid, ret_msg);
                    }
                })
                .then(moduleids => {
                    log.d(`Add all new modules`);
                    // console.log(moduleids);
                    log.i(`Start IMPORT CVE`);
                    var importReq = CVE_IMPORT_CTRL.importCve(
                        res.req.file.path, 
                        source, 
                        title, 
                        projectids,
                        moduleids, 
                        function(ireq){
                            if (DEBUG) log.d(`Import cve callback`);
                        });

                    if (DEBUG) log.d(`Response import request ${CVE_IMPORT_CTRL.importReqString(importReq)}`);
                    res.json({
                        reqId:importReq.id,
                        status:importReq.state,
                    })
                })
                .catch(err => {
                    var ret_msg = `Import failed ${err}`;
                    log.e(ret_msg);
                    return APP.responseMsg(res, ERR.ErrFailed, ret_msg);
                })
                ;
                
                
                
                
            }
            else{
                var ret_msg = `Error uploading file, no file to upload`;
                log.e(ret_msg);
                return APP.responseMsg(res, ERR.ErrFailed, ret_msg);
            }
            
        });
        
    }
    else if (reqCmd == PARAM_REQ_STATUS){ // query status of import req
        var reqImport = CVE_IMPORT_CTRL.getImportReq(reqId);
        if (reqImport != null){
            if (DEBUG) log.d(`Req infor of import req ${reqId} ${CVE_IMPORT_CTRL.importReqString(reqImport)}`);
            res.json( {
                reqId:reqImport.id,
                status:reqImport.state,
                result:reqImport.result,
                
            });

        }
        else{
            var retMsg = `Faile to get status, Import Req id ${reqId} not found`;
            log.e(retMsg);
            APP.responseMsg(res, ERR.ErrNotFound, retMsg);
        }
    }
    else if (reqCmd == PARAM_REQ_INFO){ // query status of import req
        
        if (COMMON.isValidObj(reqId)){
            if (DEBUG) log.d(`Req infor of import req ${reqId}`);
            CVE_IMPORT_CTRL.getImportInfo(reqId, function(retCode, importItem){
                if (retCode == ERR.ErrNone){
                    var item = CVE_IMPORT_CTRL.buildImportReq();
                    item.id = reqId;
                    item.workingDir = importItem.workingDir;
                    CVE_IMPORT_CTRL.readImportSummarize(item, function(retCode, data){
                        var summarize = "";
                        if (retCode == ERR.ErrNone){
                            summarize = data;
                        }
                        else{
                            summarize = "Read summarize file failed";
                        }
                        
                        res.json( {
                            
                            
                            importId:importItem.importId,
                            source:importItem.source,
                            createDate:COMMON.getTimeString(importItem.createDate),
                            workingDir:importItem.workingDir,
                            importStatus:importItem.importStatus,
                            summarize:summarize
                        });
                    })
                    
                }
                else{
    
                    var retMsg = `Fail to get info, Import Req id ${reqId} failed ${retCode}`;
                    log.e(retMsg);
                    APP.responseMsg(res, retCode, retMsg);
                }
            })

        }
        else{
            var retMsg = `Fail to get info, Import Req id ${reqId} not found`;
            log.e(retMsg);
            APP.responseMsg(res, ERR.ErrNotFound, retMsg);
        }
    }
    
}

////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////

module.exports.handleReq = handleReq

module.exports.handlePost = handlePost

module.exports.ROUTE_NAME = "admin/importcve"