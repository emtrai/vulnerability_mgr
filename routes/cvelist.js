/**
 * Copyright (C) 2022 Anh Huy Ngo - All Rights Reserved
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * Author: Anh Ngo
 * Created Date: 
 */


 'use strict';
////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////


var COMMON = require("../common");

var PROJECT_DB = require("../model/project/project_db");
var MODULE_CTRL = require("../controller/module_ctrl");
var CVE_CTRL = require("../controller/cve_ctrl");
var APP = require("../app");
var ERR = require("../errno");
////////////////////////////////////////////////////////

////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////

var log = require("../log").build("cvelist");

const PARAM_PAGE = 'page';
const PARAM_PERPAGE = 'perpage';
const PARAM_SEARCH_KEY = 'key';
const PARAM_SEARCH_CONDITION = 'cond';
const PARAM_SEARCH_IN = 'in'; // cve, module, project, etc.
const PARAM_FILTER_PRJ = 'prj'; // use with search in
const PARAM_FILTER_COMP = 'comp';
const PARAM_FILTER_MODULE = 'mod';
const PARAM_FILTER_MARKET = 'mrk';
const PARAM_FILTER_SRC = 'src';
const PARAM_FILTER_TAG = 'tag';
const PARAM_SEARCH_FIELD = 'field'; // i.e. id, moduleId, etc.
const PARAM_SEARCH_FIELD_ID = 'id'; // i.e. id, moduleId, etc.
const PARAM_SEARCH_FIELD_NAME = 'name'; // i.e. id, moduleId, etc.
const PARAM_SEARCH_FIELD_TAG = 'tag'; // i.e. id, moduleId, etc.
const PARAM_SEARCH_FIELD_VULID = 'vulid'; // i.e. id, moduleId, etc.



var paramlist=[
    PARAM_PAGE
    ,PARAM_PERPAGE
    ,PARAM_SEARCH_CONDITION
    ,PARAM_SEARCH_KEY
    ,PARAM_SEARCH_IN
    ,PARAM_FILTER_PRJ
    ,PARAM_FILTER_COMP
    ,PARAM_FILTER_COMP
    ,PARAM_FILTER_MODULE
    ,PARAM_FILTER_MARKET
    ,PARAM_FILTER_SRC
    ,PARAM_FILTER_TAG
    ,PARAM_SEARCH_FIELD
];

const DEFAULT_PER_PAGE = 50;

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////



function handleReq(req, res, next){
    log.d("handleReq");

    var projects = [];
    var modules = [];
    new Promise((resolve, reject)=>{
        PROJECT_DB.getListProject(function(retCode, items){
            resolve(items);
        });
    })
    .then(items => {
        items.forEach(element => projects.push(element));
        return MODULE_CTRL.getList();
    })
    .then(items => {
        items.forEach(element => modules.push(element));
        res.render('cvelist', {
            projects:projects.map(function(item){
                return {
                    id:item.id,
                    name:item.name
                }
            }),

            modules:modules.map(function(item){
                return {
                    id:item.id,
                    name:item.name
                }
            })
        });
    })
    ;
    // PROJECT_DB.getListProject(function(retCode, items){
    //     res.render('cvelist', {
    //         projects:items.map(function(item){
    //             return {
    //                 id:item.id,
    //                 name:item.name
    //             }
    //         })
    //     });
    // });
    
}

// function handleSearchResult(res, page, perpage, result){
//     log.d(`handleSearchResult`);
//     var cves = result.cves;
//     var totalpages = result.totalpages;
//     var idx = (page - 1)*perpage + 1;

//     log.d(`totalpages ${totalpages}, idx ${idx}, number items ${cves.length}`);
//     res.json({
//         totalpages:totalpages,
//         page:page,
//         startIdx:idx,
//         cves:cves.map(function(cve){
//             log.dumpArray(cve.modules, `Module list of ${cve.vul_id}`);
//             return {
//                 idx:idx++,
//                 id:cve.id,
//                 vul_id:cve.vul_id,
//                 cve_id:cve.cve_id,
//                 desc:cve.getDesc(),
//                 ref:cve.getRef(),
//                 tag:cve.getTag(),
//                 source:cve.source,
//                 modules:cve.modules,
//                 projects:cve.projects,
//             }})                    
//     });
// }
// function handlePost(req, res, next){
//     log.d("handlePost");

//     var page = 1;
//     var perpage = DEFAULT_PER_PAGE;
//     // TODO: implement perpage later, temporary fix 50 items per page
//     // if (req.query.hasOwnProperty(PARAM_PAGE)){
//     //     page = req.query[PARAM_PAGE];
//     // }
//     // if (req.query.hasOwnProperty(PARAM_PERPAGE)){
//     //     perpage = req.query[PARAM_PERPAGE];
//     // }
//     log.d(`page ${page} perpage ${perpage}`);


//     var searchKey="";
//     var searchIn="";
//     var searchField="";
//     if (req.query.hasOwnProperty(PARAM_SEARCH_KEY)){
//         searchKey = req.query[PARAM_SEARCH_KEY];
//     }
//     if (req.query.hasOwnProperty(PARAM_SEARCH_IN)){
//         searchIn = req.query[PARAM_SEARCH_IN];
//     }
//     if (req.query.hasOwnProperty(PARAM_SEARCH_FIELD)){
//         searchField = req.query[PARAM_SEARCH_FIELD];
//     }

//     paramlist.forEach(function(element){
        
//         if (req.query.hasOwnProperty(element)){
//             log.d(`param ${element}: ${req.query[element]}`);
//         }
//         else
//         {
//             log.d(`param ${element} NOT FOUND`);
//         }
//     });
    
//     // if (req.query.hasOwnProperty(PARAM_SEARCH_KEY)){
//     //     keyword = req.query[PARAM_SEARCH_KEY];
//     // 
//     if (!COMMON.isEmpty(searchKey)){
//         switch (searchIn){
//             case PARAM_FILTER_PRJ:

//                 if (searchField == PARAM_SEARCH_FIELD_ID){
//                     log.d(`Get CVE list by project id ${searchKey}`)
//                     CVE_CTRL.getCVEListByProject(searchKey, page, perpage).then((result) => {
//                         log.d(`Get CVE list by project callback`);
//                         handleSearchResult(res, page, perpage, result);
//                     });
//                 }
//                 break;
//             case PARAM_FILTER_MODULE:

//                 if (searchField == PARAM_SEARCH_FIELD_ID){
//                     log.d(`Get CVE list by module id ${searchKey}`)
//                     CVE_CTRL.getCVEListByModule(searchKey, page, perpage).then((result) => {
//                         log.d(`Get CVE list by module callback`);
//                         handleSearchResult(res, page, perpage, result);
//                     });
//                 }
//                 break;
//             default:
//                 log.d(`Get CVE List all by keyword ${searchKey}`);
//                 CVE_CTRL.getCVEList(searchKey, page, perpage).then((result) => {
//                     log.d(`Get CVE list callback`);
//                     handleSearchResult(res, page, perpage, result);
//                 });
            
//                 break;
                
            
//         }
//     }

// }



function extractSearchCondition(condition){
    log.d(`extractSearchCondition ${condition}`);
    var searchKeyList = [];
    var searchKeyStr = "";
    var searchIn = "";
    var searchField = "";
    if (!COMMON.isEmpty(condition)){
        [searchKeyStr, searchIn, searchField] = condition.split('|');
        if (!COMMON.isEmpty(searchKeyStr)){
            searchKeyList = searchKeyStr.split(',');
        }
    }
    
    
    log.d(`searchKeyStr ${searchKeyStr}`);
    log.d(`searchIn ${searchIn}`);
    log.d(`searchField ${searchField}`);
    
    var cond = {
        searchKeys:searchKeyList,
        searchIn:searchIn,
        searchField:searchField
    }
    console.log(cond);
    return cond;
}

function handleSearchResult(res, page, perpage, cves, totals, totalpages){
    log.d(`handleSearchResult`);
    // var cves = result.cves;
    // var totalpages = result.totalpages;
    var idx = (page - 1)*perpage + 1;

    log.d(`totalpages ${totalpages}, idx ${idx}, number items ${cves.length}`);
    res.json({
        totalpages:totalpages,
        page:page,
        startIdx:idx,
        cves:cves.map(function(cve){
            log.dumpArray(cve.modules, `Module list of ${cve.vul_id}`);
            return {
                idx:idx++,
                id:cve.id,
                vul_id:cve.vul_id,
                cve_id:cve.cve_id,
                desc:cve.getDesc(),
                ref:cve.getRef(),
                tag:cve.getTag(),
                source:cve.source,
                modules:cve.modules,
                projects:cve.projects,
            }})                    
    });
}

function handlePost(req, res, next){
    log.d("handlePost");

    var page = 1;
    var perpage = DEFAULT_PER_PAGE;
    // TODO: implement perpage later, temporary fix 50 items per page
    // if (req.query.hasOwnProperty(PARAM_PAGE)){
    //     page = req.query[PARAM_PAGE];
    // }
    // if (req.query.hasOwnProperty(PARAM_PERPAGE)){
    //     perpage = req.query[PARAM_PERPAGE];
    // }
    log.d(`page ${page} perpage ${perpage}`);


    var searchConditions=null; // format: keyword|<in, like project>|<field, like ID>
    // var searchIn="";
    // var searchField="";
    console.log(req.query);
    if (req.query.hasOwnProperty(PARAM_SEARCH_CONDITION)){
        searchConditions = req.query[PARAM_SEARCH_CONDITION];
    }
    var searchConditionList = [];
    log.d(`searchConditions ${searchConditions}`);
    if (Array.isArray(searchConditions)){
        searchConditions.forEach(element => {
            searchConditionList.push(extractSearchCondition(element));
        });
    }
    else{
        searchConditionList.push(extractSearchCondition(searchConditions));
    }
    // var listCVE = {};
    // var totalItems = 0;
    var requests = searchConditionList.map(cond => {
        return new Promise((resolve, reject) => {
            var searchIn = cond.searchIn;
            var searchField = cond.searchField;
            var searchKey = cond.searchKeys;
            log.d(`searchIn: ${searchIn}`);
            log.d(`searchField: ${searchField}`);
            log.d(`searchKey: ${searchKey}`);
            switch (searchIn){
                case PARAM_FILTER_PRJ:

                    if (searchField == PARAM_SEARCH_FIELD_ID){
                        log.d(`Get CVE list by project id ${searchKey}`)
                        CVE_CTRL.getCVEListByProjectId(searchKey, page, perpage).then((result) => {
                            log.d(`Get CVE list by project callback`);
                            resolve(result);
                        });
                    }
                    // else if (searchField == PARAM_SEARCH_FIELD_NAME){

                    // }
                    // else if (searchField == PARAM_SEARCH_FIELD_TAG){

                    // }
                    // else if (searchField == PARAM_SEARCH_FIELD_VULID){

                    // }
                    else{
                        reject(COMMON.buildError(`Not support project field ${searchField}`, ERR.ErrInvalid));
                    }
                    break;
                case PARAM_FILTER_MODULE:

                    if (searchField == PARAM_SEARCH_FIELD_ID){
                        log.d(`Get CVE list by module id ${searchKey}`)
                        CVE_CTRL.getCVEListByModule(searchKey, page, perpage).then((result) => {
                            log.d(`Get CVE list by module callback`);
                            // handleSearchResult(res, page, perpage, result);
                            resolve(result);
                        });
                    }
                    else{
                        reject(COMMON.buildError(`Not support module field ${searchField}`, ERR.ErrInvalid));
                    }
                    break;
                default:
                    log.d(`Get CVE List all by keyword ${searchKey}`);
                    CVE_CTRL.getCVEList(searchKey, page, perpage).then((result) => {
                        log.d(`Get CVE list callback`);
                        // handleSearchResult(res, page, perpage, result);
                        resolve(result);
                    });
                
                    break;
            }
        });
    });

    Promise.allSettled(requests)
        .then((results) => {
            log.d(`handle post allSettled`);
            var cveList = {};
            var total = 0;
            var totalFound = 0;
            var totalSkip = 0;
            var idx = 0;
            var length = results.length;
            for (idx = 0; idx < length; idx++){
                log.d(`Result ${idx}: ${results[idx].status}`);
                if (results[idx].status == "rejected"){
                   log.e(`Reject`);
                   var [msg, code, data] = COMMON.parseError(results[idx].reason);
                   APP.responseMsg(res, code, msg);
                   break;

                }
                else{
                    var cves = results[idx].value.cves;
                    if (!COMMON.isEmpty(cves))
                    {
                        if (idx == 0){
                            log.d(`1st time, dict empty`);
                            // cveList = Object.assign({}, results[idx].value.cves);
                            cves.forEach(element => {

                                log.d(`add ${element.id} to list`);
                                cveList[element.id] = element;
                                total += 1;
                            });
                            // total = cveList.length;
                            // sum.added += 1;
                            totalFound = total;
                        }
                        else{
                            var tmpList = {};
                            cves.forEach(element => {

                                totalFound += 1;
                                if (!cveList.hasOwnProperty(element.id)){
                                    log.d(`Not exist ${element.id}, delete it`);
                                    delete cveList[element.id];
                                    total -= 1;
                                    totalSkip += 1;
                                }
                                else{
                                    log.d(`exist ${element.id}, keep it`);
                                    tmpList[element.id] = element;
                                }
                            });
                            cveList = tmpList;
                        }
                    }
                    else{
                        cveList = {};
                        total = 0;
                        break;
                    }
                    
                }
            }
            log.d(`total ${total}`);
            log.d(`totalFound ${totalFound}`);
            log.d(`totalSkip ${totalSkip}`);
            log.dumpDict(cveList, "cveList");
            handleSearchResult(res, page, perpage, Object.values(cveList), total, (total/perpage + 1) | 0)
            // results.forEach(result=>
            //     {
                    
                    
            //     }
            // );
            // sum.result = ERR.ErrNoData;
            // resolve(sum);
        })
        .cache((err) => {
            var [msg, code, data] = COMMON.parseError(err);
            APP.responseMsg(res, code, msg);
        })
        // .catch((err) => {
        //     log.e(`Imported CVE faild all ${err}`);
        //     sum.result = ERR.ErrFailed;
        //     sum.msg = `Imported CVE faild all ${err}`;
        //     reject (COMMON.buildError("Imported CVE faild all", ERR.ErrFailed, sum));
        // })
        ;

    // if (searchConditionList.length == 1)
    // {
        // searchConditionList.forEach(cond => {
        //     var searchIn = cond.searchIn;
        //     var searchField = cond.searchField;
        //     var searchField = cond.searchField;
        //     var searchKey = cond.searchKeys;
        //     switch (searchIn){
        //         case PARAM_FILTER_PRJ:

        //             if (searchField == PARAM_SEARCH_FIELD_ID){
        //                 log.d(`Get CVE list by project id ${searchKey}`)
        //                 CVE_CTRL.getCVEListByProject(searchKey, page, perpage).then((result) => {
        //                     log.d(`Get CVE list by project callback`);
        //                     handleSearchResult(res, page, perpage, result);
        //                 });
        //             }
        //             break;
        //         case PARAM_FILTER_MODULE:

        //             if (searchField == PARAM_SEARCH_FIELD_ID){
        //                 log.d(`Get CVE list by module id ${searchKey}`)
        //                 CVE_CTRL.getCVEListByModule(searchKey, page, perpage).then((result) => {
        //                     log.d(`Get CVE list by module callback`);
        //                     handleSearchResult(res, page, perpage, result);
        //                 });
        //             }
        //             break;
        //         default:
        //             log.d(`Get CVE List all by keyword ${searchKey}`);
        //             CVE_CTRL.getCVEList(searchKey, page, perpage).then((result) => {
        //                 log.d(`Get CVE list callback`);
        //                 handleSearchResult(res, page, perpage, result);
        //             });
                
        //             break;
                    
                
        //     }
        // });
    // }
    // else
    // {
    //     log.d(`Multiple conditions, AND`)
    //     CVE_CTRL.getCVEList(null, page, perpage).then((result) => {
    //         log.d(`Get CVE list callback`);
    //         handleSearchResult(res, page, perpage, result);
    //     });
    // }
   

}

////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////
module.exports.handleReq = handleReq;
module.exports.handlePost = handlePost;
module.exports.ROUTE_NAME = "list";