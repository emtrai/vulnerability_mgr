////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////

var ModCve = require("../model/cve/cve_db");
var COMMON = require("../common");
var log = require("../log").build("cvelist");

var ModProject = require("../model/project/project_db");
var CVE_CTRL = require("../controller/cve_ctrl");
var APP = require("../app");
////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////

const PARAM_PAGE = 'page';
const PARAM_PERPAGE = 'perpage';
const PARAM_SEARCH_KEY = 'key';
const PARAM_SEARCH_IN = 'in'; // cve, module, project, etc.
const PARAM_FILTER_PRJ = 'prj'; // use with search in
const PARAM_FILTER_COMP = 'comp';
const PARAM_FILTER_MODULE = 'mod';
const PARAM_FILTER_MARKET = 'mrk';
const PARAM_FILTER_SRC = 'src';
const PARAM_FILTER_TAG = 'tag';
const PARAM_SEARCH_FIELD = 'field'; // i.e. id, moduleId, etc.
const PARAM_SEARCH_FIELD_ID = 'id'; // i.e. id, moduleId, etc.



var paramlist=[
    PARAM_PAGE
    ,PARAM_PERPAGE
    ,PARAM_SEARCH_KEY
    ,PARAM_SEARCH_IN
    ,PARAM_FILTER_PRJ
    ,PARAM_FILTER_COMP
    ,PARAM_FILTER_COMP
    ,PARAM_FILTER_MODULE
    ,PARAM_FILTER_MARKET
    ,PARAM_FILTER_SRC
    ,PARAM_FILTER_TAG
    ,PARAM_SEARCH_FIELD
];


////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////

async function getSearchStategy(callback){
    log.d("getSearchStategy");
    ModProject.getListProject(function(){
        
    });
    callback();
}
function handleReq(req, res, next){
    log.d("handleReq");
    page = 1;
    perpage = 10;

    var page = 1;
    var perpage = 10;
    var searchKey="";
    var searchIn="";
    var searchField="";
    if (req.query.hasOwnProperty(PARAM_PAGE)){
        page = req.query[PARAM_PAGE];
    }
    if (req.query.hasOwnProperty(PARAM_PERPAGE)){
        perpage = req.query[PARAM_PERPAGE];
    }
    if (req.query.hasOwnProperty(PARAM_SEARCH_KEY)){
        searchKey = req.query[PARAM_SEARCH_KEY];
    }
    if (req.query.hasOwnProperty(PARAM_SEARCH_IN)){
        searchIn = req.query[PARAM_SEARCH_IN];
    }
    if (req.query.hasOwnProperty(PARAM_SEARCH_FIELD)){
        searchField = req.query[PARAM_SEARCH_FIELD];
    }

    getSearchStategy(function(){
        // if (!COMMON.isEmpty(searchKey) && !COMMON.isEmpty(searchIn)
        //     && !COMMON.isEmpty(searchField)
        // ){
        //     switch (searchField){
        //         case PARAM_SEARCH_FIELD_ID:
        //             switch (searchIn){
        //                 case PARAM_FILTER_PRJ:

        //                     break;
        //             }
        //             break;
                
        //     }
        // }

        res.render('cvelist');
    });
    
}

function handleSearchResult(res, page, perpage, result){
    log.d(`handleSearchResult`);
    var cves = result.cves;
    var totalpages = result.totalpages;
    var idx = (page - 1)*perpage + 1;

    log.d(`totalpages ${totalpages}, idx ${idx}, number items ${cves.length}`);
    res.json({
        totalpages:totalpages,
        page:page,
        startIdx:idx,
        cves:cves.map(function(cve){
            log.dumpArray(cve.modules, `Module list of ${cve.vul_id}`);
            return {
                idx:idx++,
                id:cve.id,
                vul_id:cve.vul_id,
                cve_id:cve.cve_id,
                desc:cve.getDesc(),
                ref:cve.getRef(),
                tag:cve.getTag(),
                source:cve.source,
                modules:cve.modules,
                projects:cve.projects,
            }})                    
    });
}
function handlePost(req, res, next){
    log.d("handlePost");

    var page = 1;
    var perpage = 10;
    if (req.query.hasOwnProperty(PARAM_PAGE)){
        page = req.query[PARAM_PAGE];
    }
    if (req.query.hasOwnProperty(PARAM_PERPAGE)){
        perpage = req.query[PARAM_PERPAGE];
    }
    log.d(`page ${page} perpage ${perpage}`);


    var searchKey="";
    var searchIn="";
    var searchField="";
    if (req.query.hasOwnProperty(PARAM_SEARCH_KEY)){
        searchKey = req.query[PARAM_SEARCH_KEY];
    }
    if (req.query.hasOwnProperty(PARAM_SEARCH_IN)){
        searchIn = req.query[PARAM_SEARCH_IN];
    }
    if (req.query.hasOwnProperty(PARAM_SEARCH_FIELD)){
        searchField = req.query[PARAM_SEARCH_FIELD];
    }

    paramlist.forEach(function(element){
        
        if (req.query.hasOwnProperty(element)){
            log.d(`param ${element}: ${req.query[element]}`);
        }
        else
        {
            log.d(`param ${element} NOT FOUND`);
        }
    });
    
    // if (req.query.hasOwnProperty(PARAM_SEARCH_KEY)){
    //     keyword = req.query[PARAM_SEARCH_KEY];
    // 
    if (!COMMON.isEmpty(searchKey)){
        switch (searchIn){
            case PARAM_FILTER_PRJ:

                if (searchField == PARAM_SEARCH_FIELD_ID){
                    log.d(`Get CVE list by project id ${searchKey}`)
                    CVE_CTRL.getCVEListByProject(searchKey, page, perpage).then((result) => {
                        log.d(`Get CVE list by project callback`);
                        handleSearchResult(res, page, perpage, result);
                    });
                }
                break;
            case PARAM_FILTER_MODULE:

                if (searchField == PARAM_SEARCH_FIELD_ID){
                    log.d(`Get CVE list by module id ${searchKey}`)
                    CVE_CTRL.getCVEListByModule(searchKey, page, perpage).then((result) => {
                        log.d(`Get CVE list by module callback`);
                        handleSearchResult(res, page, perpage, result);
                    });
                }
                break;
            default:
                log.d(`Get CVE List all by keyword ${searchKey}`);
                CVE_CTRL.getCVEList(searchKey, page, perpage).then((result) => {
                    log.d(`Get CVE list callback`);
                    handleSearchResult(res, page, perpage, result);
                    // var cves = result.cves;
                    // var totalpages = result.totalpages;
                    // var idx = (page - 1)*perpage + 1;
                    // res.json({
                    //     totalpages:totalpages,
                    //     page:page,
                    //     startIdx:idx,
                    //     cves:cves.map(function(cve){
                    //         log.dumpArray(cve.modules, `Module list of ${cve.vul_id}`);
                    //         return {
                    //             idx:idx++,
                    //             id:cve.id,
                    //             vul_id:cve.vul_id,
                    //             cve_id:cve.cve_id,
                    //             desc:cve.getDesc(),
                    //             ref:cve.getRef(),
                    //             tag:cve.getTag(),
                    //             source:cve.source,
                    //             modules:cve.modules,
                    //             projects:cve.projects,
                    //         }})                    
                    // });
                });
            
                break;
                
            
        }
    }

    // CVE_CTRL.getCVEList(keyword, page, perpage).then((result) => {
    //     log.d(`Get CVE list callback`);

    //     var cves = result.cves;
    //     var totalpages = result.totalpages;
    //     var idx = (page - 1)*perpage + 1;
    //     res.json({
    //         totalpages:totalpages,
    //         page:page,
    //         startIdx:idx,
    //         cves:cves.map(function(cve){
    //             log.dumpArray(cve.modules, `Module list of ${cve.vul_id}`);
    //             return {
    //                 idx:idx++,
    //                 id:cve.id,
    //                 vul_id:cve.vul_id,
    //                 cve_id:cve.cve_id,
    //                 desc:cve.getDesc(),
    //                 ref:cve.getRef(),
    //                 tag:cve.getTag(),
    //                 source:cve.source,
    //                 modules:cve.modules,
    //                 projects:cve.projects,
    //             }})                    
    //     });
    // });
}

////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////
module.exports.handleReq = handleReq;
module.exports.handlePost = handlePost;
module.exports.ROUTE_NAME = "list";