var errno = require("../errno");
var ModComm = require("../common");
var log = require("../log").build("import");
var ModUuid = require('uuid');

const {
    Worker
  } = require('worker_threads');

const IMPORT_NIST = "nist";

const IMPORT_STATE_IDLE = 0;
const IMPORT_STATE_PARSE = 1;
const IMPORT_STATE_DB = 2;
const IMPORT_STATE_DONE = 3;
const IMPORT_STATE_ERROR = -1;

function getImportReq(fpath, type){
    return {
        path:fpath,
        type:type,
        id:ModUuid.v1(),
        state:IMPORT_STATE_IDLE
    }
}

const requestList = new Map();

function add2ReqList(req){
    requestList.set(req.id, req);
}


function doImport(fpath, type, callback){
    return new Promise(function(resolve, reject){
        var req = getImportReq(fpath, type);
        add2ReqList(req);
        const worker = new Worker('./import/nist.js', {workerData:{
            req
        }});
        worker.on("message", resolve);
        worker.on("error", reject);
        worker.on("exit", (code)=>log.e(`Exit code: ${code}`));

    });
}

async function importCveFile(fpath, type, callback){
    doImport(fpath, type, callback)
        .then((result) => log.e(`Result of import ${result}`))
        .catch(error => log.e(error))
}

exports.importCve = importCveFile;