/**
 * Copyright (C) 2022 Anh Huy Ngo - All Rights Reserved
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * Author: Anh Ngo
 * Created Date: 
 */
////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////s

'use strict';

var CONFIG = require('./config');

// ROUTE MAP list
var ROUTE_VIEW_CVE_LIST = require('./routes/cvelist.js');
var ROUTE_PROJECTS = require('./routes/projects.js');
var ROUTE_PRJ = require('./routes/prj.js');
var ROUTE_MODULES = require('./routes/modules.js');
var ROUTE_CVE = require('./routes/cve.js');
var ROUTE_SCAN_BIN = require('./routes/scanbin.js');

var ROUTE_ADMIN = require('./routes/admin/admin.js');
var ROUTE_ADMIN_IMPORTLIST = require('./routes/admin/importlist.js');
var ROUTE_ADMIN_IMPORT_CVE = require('./routes/admin/importcve.js');
var ROUTE_ADMIN_VUL_LIST = require('./routes/admin/vullist.js');

var MULTER  =  require('multer');
var DB = require('./db/db');

var COMMON = require('./common.js');
var ERR = require('./errno.js');

var EXPRESS = require('express');

var PATH = require('path');

////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////


var Config = CONFIG.Config;

var log = require('./log').build("app");


var ROUTE_HOME = "";
var ROUTE_ABOUT = "about";

const HTTP_CODE_OK = 200;
const HTTP_CODE_HANDLE_FAIL = 400; // use HTTP 400 as failure reponse code

// TODO: check and re-setup path if excute app.js from other folder, not app.js folder
var handlebars = require('express3-handlebars').create({
    defaultLayout:'main',
    helpers: {
        section: function(name, options){
            if(!this._sections) this._sections = {};
            this._sections[name] = options.fn(this);
            return null;
        },
        copyrightYear: function() {
            return new Date().getFullYear();
        },
        version: function() {
            return "1.0";
        },
    }
});

/**
 * Location to store uploaded files.
 */
var storageUpload =   MULTER.diskStorage({
    destination: function (req, file, callback) {
      callback(null, CONFIG.getUploadLocation()); // location to store uploaded file
    },
    filename: function (req, file, callback) {
      callback(null, file.fieldname + '_' + COMMON.getTimeStringForName());// file uploade with name: uploade filename + datetime
    }
  });
  
var upload = MULTER({ storage : storageUpload});

/**
 * Route map:
 * key: route name/path
 * value: array, 1st element: get function, 2nd element: post function
 * i.e. 
 * {
 * "home":[handle_get, handle_post]
 * }
 */
var routemap = {};

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////

/**
 * GET rquest for home page (/)
 * @param {*} req 
 * @param {*} res 
 * @param {*} next 
 */
function homepage_get(req, res, next){
    log.d("Home page req get");

    // render home page
    res.render('home', {
        title: 'HOME'
    })
}

/**
 * GET request for About page
 * @param {*} req 
 * @param {*} res 
 * @param {*} next 
 */
function about_get(req, res, next){
    log.d("About req get");

    // render about page
    res.render('about');
}

/**
 * Common http response message.
 * Response message shall be in json format:
 * {
 * code:<ret param>
 * msg:<msg param>
 * }
 * @param {*} res response object, it's "res" parameter of http request
 * @param {*} ret returned code, usually use common error code in module errno (i.e. ERR.Errxxxx)
 * @param {*} msg returned message, message shall be responsed
 */
function responseMsg(res, ret, msg){
    log.d(`responseMsg ${ret}, ${msg}`)
    if (ret == ERR.ErrNone){ // if it's ok, response http 200
        res.status(200);
    }
    else{ // if it's failure code, response with http code failed (i.e. 400)
        res.status(HTTP_CODE_HANDLE_FAIL);
    }
    // response
    res.json({
        code:ret,
        msg:msg
    });
}


/**
 * Initialize routing map
 */
function init_route_map(){
    routemap[ROUTE_HOME] = [homepage_get, null];
    routemap[ROUTE_ABOUT] = [about_get, null];
    routemap[ROUTE_VIEW_CVE_LIST.ROUTE_NAME] = [ROUTE_VIEW_CVE_LIST.handleReq, ROUTE_VIEW_CVE_LIST.handlePost];
    routemap[ROUTE_PROJECTS.ROUTE_NAME] = [ROUTE_PROJECTS.handleReq, ROUTE_PROJECTS.handlePost];
    routemap[ROUTE_PRJ.ROUTE_NAME] = [ROUTE_PRJ.handleReq, ROUTE_PRJ.handlePost];
    
    routemap[ROUTE_MODULES.ROUTE_NAME] = [ROUTE_MODULES.handleReq, ROUTE_MODULES.handlePost];
    routemap[ROUTE_CVE.ROUTE_NAME] = [ROUTE_CVE.handleReq, ROUTE_CVE.handlePost];
    
    // scan binaries routing
    routemap[ROUTE_SCAN_BIN.ROUTE_NAME] = [ROUTE_SCAN_BIN.handleReq, ROUTE_SCAN_BIN.handlePost];


    // admin routing
    routemap[ROUTE_ADMIN.ROUTE_NAME] = [ROUTE_ADMIN.handleReq, ROUTE_ADMIN.handlePost];
    routemap[ROUTE_ADMIN_IMPORTLIST.ROUTE_NAME] = [ROUTE_ADMIN_IMPORTLIST.handleReq, ROUTE_ADMIN_IMPORTLIST.handlePost];
    routemap[ROUTE_ADMIN_VUL_LIST.ROUTE_NAME] = [ROUTE_ADMIN_VUL_LIST.handleReq, ROUTE_ADMIN_VUL_LIST.handlePost];
    routemap[ROUTE_ADMIN_IMPORT_CVE.ROUTE_NAME] = [ROUTE_ADMIN_IMPORT_CVE.handleReq, ROUTE_ADMIN_IMPORT_CVE.handlePost];

    log.i(routemap);
}

/**
 * Common function to handle get/post http request
 * Search in route map, find corresponding function, then route request to found one, else resposne erro
 * @param {*} req 
 * @param {*} res 
 * @param {*} next 
 * @param {*} get "true" for get, "false" for POST
 */
function handle_get_post(req, res,next, get=true){
    var path = req.path.substring(1);
    // TODO: how about Sub domain??? i.e. sub.domain.com
    log.d(`path: '${path}'`);

    if (routemap.hasOwnProperty(path)){
        var router = null;
        // asume that routemap is built correctly.
        // should we trust? it's my code, I trust myself, if other's code, not goodbless us.
        if (get) router = routemap[path][0];
        else router = routemap[path][1]

        // call route function
        if (router != null)
            router (req, res, next);
        else{ // f*ck, why it happens????
            log.e(`'${path}' not support this route`);
            res.status(404);
            res.render('404');
        }
    }
    else{ // not support path, render error page
        log.e(`'${path}' not in route map`);
        res.status(404);
        res.render('404');
    }
}

/**
 * MAIN FUNCTION
 */
function main(){
    // Set root path
    COMMON.setAppRoot(PATH.resolve(__dirname));

    var app = EXPRESS()

    app.set('port', process.env.PORT || Config.PORT);

    app.engine('handlebars', handlebars.engine);
    app.set('view engine', 'handlebars')

    // get static (html, layout, js, css... from views folder)
    app.use(EXPRESS.static(__dirname + '/views'));

    app.use(EXPRESS.json());
    app.use(EXPRESS.urlencoded({ extended: true })) // for form data

    // common route function for HTTP get/post method
    app.get("/*", function(req, res, next){
        log.d("GET request " + req.path);
        handle_get_post(req, res, next);
    });


    app.post("/*", function(req, res, next){
        log.d("POST request " + req.path);
        handle_get_post(req, res, next, false);
    });


    // custom 404 page
    app.use(function(req, res){
        res.status(404);
        res.render('404');

    });

    // custom 500 page
    app.use(function(err, req, res, next){
        console.error(err.stack);
        res.type('text/plain');
        res.status(500);
        res.send('500 - Server Error');
    });

    // init database
    DB.initDB();

    // init route map
    init_route_map();

    // now, start listening
    app.listen(app.get('port'), function(){
        console.log( 'Server started on http://localhost:' +
        app.get('port') + '; press Ctrl-C to terminate.' );
    });
    

}

////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////

/**
 * Upload file
 * @param {*} req 
 * @param {*} res 
 * @param {*} name suffix for file name
 * @param {*} func callback function after finish
 */
module.exports.uploadfile = function(req, res, name, func){
    log.d("upload file")
    upload.single(name)(req, res, func);
};


exports.responseMsg = responseMsg;

////////////////////////////////////////////////////////////////////
// RUN
////////////////////////////////////////////////////////////////////

main();


