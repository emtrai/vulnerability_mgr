// var ModConst = 
const WORKER = require('worker_threads');

// var COMMON = require("./common");

function isDebug(){
    return require("./config").Config.DEBUG;
}

function log(type, tag, msg, tofile=false){
    
    console.log(`${type} ${(new Date().toISOString())} ${process.pid} ${WORKER.threadId} ${tag} : ${msg}`);
    // console.log(type + " " + (new Date().toISOString()) + " " + tag + ": " + msg);
};
function logE(type, tag, msg, tofile=false){
    // console.error(type + " " + (new Date().toISOString()) + " " + tag + ": " + msg);
    console.error(`${type} ${(new Date().toISOString())} ${process.pid} ${WORKER.threadId} ${tag} : ${msg}`);
};

function Log(tag){
    this.tag = tag;
}

Log.prototype.raw = function(msg, tofile=false){
    console.log(msg);
}


Log.prototype.i = function(msg, tofile=false){
    log("I", this.tag, msg, tofile);
}


Log.prototype.d = function(msg){
    if (isDebug()){
        log("D", this.tag, msg);
    }
}

Log.prototype.e = function(msg, tofile=false){
    logE("E", this.tag, msg, tofile);
}

function isEmpty(str){
    return (!str || str.length === 0 || (str === undefined))
}
function isDictEmpty(dict) {
    return (!dict || (Object.keys(dict).length === 0) || (dict === undefined));
}

Log.prototype.dumpArray = function(arr, msg="", separater='|'){
    this.d("dumpArray below ...");
    if (isEmpty(arr)){
        this.d(`${msg}: empty`);
    }
    else{
        var arrstr = "";
        arr.forEach(element => {
            arrstr += `${element} ${separater}`;
        });
        this.d(`${msg}: ${arrstr}`);
    }
}

Log.prototype.dumpDict = function(dict, msg="", separater=' ', getString=null){
    this.d("dumpDict below ...");
    if (isDictEmpty(dict)){
        this.d(`${msg}: empty`);
    }
    else{
        var arrstr = "";
        // console.log(dict);
        for (const [key, values] of Object.entries(dict)) {
            
            arrstr += `\n${key} => `;
            var elestr = "";
            if (Array.isArray(values)){
                values.forEach(element => {

                    if (getString){
                        elestr = getString(element);
                    }
                    else{
                        elestr = element;
                    }
                    arrstr += `${elestr} ${separater}`;
                });
            }
            else{
                if (getString){
                    elestr = getString(values);
                }
                else{
                    elestr = values;
                }
                arrstr += `${elestr} ${separater}`;
            }
            
          }

        // for (var key in dict){
        //     var values = dict[key];
        //     arrstr += `\n${key} => `;
        //     values.forEach(element => {
        //         arrstr += `${element} ${separater}`;
        //     });

        // }
        this.d(`${msg}: ${arrstr}`);
    }
}


exports.build = function(tag){
    return new Log(tag);
}