var ModConst = require("./config").Config;
// var COMMON = require("./common");

function log(type, tag, msg, tofile=false){
    console.log(type + " " + (new Date().toISOString()) + " " + tag + ": " + msg);
};
function logE(type, tag, msg, tofile=false){
    console.error(type + " " + (new Date().toISOString()) + " " + tag + ": " + msg);
};

function Log(tag){
    this.tag = tag;
}


Log.prototype.i = function(msg, tofile=false){
    log("I", this.tag, msg, tofile);
}


Log.prototype.d = function(msg){
    if (ModConst.DEBUG){
        log("D", this.tag, msg);
    }
}

Log.prototype.e = function(msg, tofile=false){
    logE("E", this.tag, msg, tofile);
}

function isEmpty(str){
    return (!str || str.length === 0 || (str === undefined))
}
function isDictEmpty(dict) {
    return (!dict || (Object.keys(dict).length === 0) || (dict === undefined));
}

Log.prototype.dumpArray = function(arr, msg="", separater='|'){
    if (isEmpty(arr)){
        this.d(`${msg}: empty`);
    }
    else{
        var arrstr = "";
        arr.forEach(element => {
            arrstr += `${element} ${separater}`;
        });
        this.d(`${msg}: ${arrstr}`);
    }
}

Log.prototype.dumpDict = function(dict, msg="", separater=' '){
    if (isDictEmpty(dict)){
        this.d(`${msg}: empty`);
    }
    else{
        var arrstr = "";
        // console.log(dict);
        for (const [key, values] of Object.entries(dict)) {
            
            arrstr += `\n${key} => `;
            values.forEach(element => {
                arrstr += `${element} ${separater}`;
            });
          }

        // for (var key in dict){
        //     var values = dict[key];
        //     arrstr += `\n${key} => `;
        //     values.forEach(element => {
        //         arrstr += `${element} ${separater}`;
        //     });

        // }
        this.d(`${msg}: ${arrstr}`);
    }
}


exports.build = function(tag){
    return new Log(tag);
}