/**
 * Copyright (C) 2022 Anh Huy Ngo - All Rights Reserved
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * Author: Anh Ngo
 * Created Date: 
 */

/**
 * Handle tag-related processing, including tag of vulnerabilities, project, module, etc.
 * Predefined tags are loaded from file, then cached in memory
 * There are 2 kinds of predefined tags
 * - Default tags:
 * - Custome tags: added by authorized users, when adding project/module/vulnerabilities
 */
'use strict';
////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////

var ERR = require("../errno");
var COMMON = require("../common");

const FS = require('fs');
const READLINE = require('readline');

////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////

var log = require("../log").build("tags");

const PRJ_TAG = "prj";
const MODULE_TAG = "module";
const VUL_TAG = "vul";

var TAGS_FILES = {}

// cached tags list
// in dictionary, key is list name (i.e. project, cve, module), value is dict of tags, id is tagid, value is tag name
// tag id is lowercase of tag name, and it's unique
// CACHED_TAG_LISTS[tag list name][tag id] = <tag name>
var CACHED_TAG_LISTS = {}

const SEPARATE_TAG_FIELD=":";
////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////

/**
 * Get tag from cache
 * @param {*} list tag list, can be project, cve, module, etc.
 * @returns 
 */
function getTags(list = PRJ_TAG){
    log.d(`getTags ${list}`);
    var taglist = {};

    if (CACHED_TAG_LISTS.hasOwnProperty(list)){
        log.d("Get tag from cache");
        taglist = CACHED_TAG_LISTS[list];
    }
    else{
        log.e(`Tag '${list}' not found`);
    }
    // log.d(`Taglist ${taglist}`);
    // dumpTags(taglist);
    return taglist;
}


function dumpTags(taglist = null,list = PRJ_TAG){
    log.d(`dumpTags ${list}`);
    if (taglist == null)
        taglist = getTags(list);
    Object.keys(taglist).forEach(id =>{
        log.d(`dumpTags tag '${id}': ${taglist[id]}`)
    });  
}

/**
 * Add new tag, update custome tags list
 * @param {*} tagname 
 * @param {*} list 
 * @returns 
 */
function addTag(tagname, list = PRJ_TAG){
    log.d(`addTag '${tagname}' to '${list}'`);
    var taglist = {};
    if (Object.keys(TAGS_FILES).includes(list)){
        taglist = getTags(list);
        tagname = tagname.trim();
        var tagid = COMMON.str2strId(tagname, COMMON.STRID_TYPE_STR);
        if (!taglist.hasOwnProperty(tagid)){
            // taglist[tagid] = tagname.trim();
            CACHED_TAG_LISTS[list][tagid] = tagname;
            var lines = [tagname];

            
            var fpath = TAGS_FILES[list][1];
            log.i(`Write taglist to file '${fpath}'`);
            log.d(lines);
            // Update tag list file
            COMMON.writeLinesToFiles(fpath, lines, true);
            // TODO: handle error case
            log.raw(taglist);
        }
        else{
            log.i(`tag ${tagname} already existed`);
        }
    }
    else{
        log.e(`Tag '${list}' not support`);
    }
    
    return taglist;
}

function delTags(tagid){

}

/**
 * Add tag to cache
 * @param {*} tagname tag name
 * @param {*} list list to be added
 */
function addTagToCache(tagname, list=PRJ_TAG){
    log.d(`addTagToCache list '${list}', tagname '${tagname}'`)
    var tagid = COMMON.str2strId(tagname, COMMON.STRID_TYPE_STR);
    log.d(`Tagid ${tagid}, ${tagname}`);
    if (!COMMON.isEmpty(tagid) && !COMMON.isEmpty(tagname)){
        if (!CACHED_TAG_LISTS[list].hasOwnProperty(tagid))
        {
            log.d(`Add ${tagid}/${tagname} to list`);
            CACHED_TAG_LISTS[list][tagid] = tagname;
        }
        else{
            log.e(`tagid ${tagid} already existed in list ${list}`);
        }
        
        
    }
    else{
        log.i(`Invalid tag '${tagid}':'${tagname}'`);
    }
    
}

/**
 * Load tags from files to cache
 */
function loadTags(){
    log.i("load Tags");

    Object.keys(TAGS_FILES).forEach(list =>{
        log.i(`Tag '${list}`);
        var fpaths = TAGS_FILES[list];
        CACHED_TAG_LISTS[list] = {};
        fpaths.forEach(fpath => {
            log.i(`Tag '${list}: read from file ${fpath}'`);
            // read from file
            // TODO: handle error case
            COMMON.readFileLineByLine(fpath)
                .then((lines) => {
                    log.d(`read line cb: ${lines}`);
                    if (!COMMON.isEmpty(lines)){
                        lines.forEach(line => {
                            line = line.trim();
                            log.d(`Line ${line}`);
                            if (!COMMON.isEmpty(line) && !line.startsWith("#")){

                                
                                addTagToCache(line, list);
                            }
                            else{
                                log.d(`Skip`);
                            }
                        });
                    }
                    else{
                        log.e("Read tag from file failed");
                    }
                })
                .catch((ret) => {
                    log.e(`Read ${fpath} failed: ${ret}`);
                    })
                ;
            });

    })
    
}

function init(){
    log.i("Init tags_ctrl");
    // TODO: need to make sure that this always be called...
    //                          [Default Tags List File]            [Custome Tags List File]
    TAGS_FILES[PRJ_TAG]     =   [COMMON.getPathFromRoot("prj_tag"), COMMON.getPathFromRoot("prj_tag_custom")];
    TAGS_FILES[MODULE_TAG]     =   [COMMON.getPathFromRoot("cve_module_tag"), COMMON.getPathFromRoot("cve_module_tag_custom")];
    TAGS_FILES[VUL_TAG]     =   [COMMON.getPathFromRoot("vul_tag"), COMMON.getPathFromRoot("vul_tag_custom")];
    loadTags(); // TODO: need to make sure tags load ok????
}


init(); // FIXME: is it safe when call init here???
////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////

exports.getTags = getTags;
exports.getModuleTags = function(){
    return getTags(MODULE_TAG);
};
exports.getVulTags = function(){
    return getTags(VUL_TAG);
};
exports.addTag = addTag;
exports.addVulTag = function(tag){
    return addTag(tag, VUL_TAG);
};
exports.dumpTags = dumpTags;
exports.PRJ_TAG = PRJ_TAG;
exports.VUL_TAG = VUL_TAG;

