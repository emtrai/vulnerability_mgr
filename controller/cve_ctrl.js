/**
 * Copyright (C) 2022 Anh Huy Ngo - All Rights Reserved
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * Author: Anh Ngo
 * Created Date: 
 */

////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////

var ERR = require("../errno");
var COMMON = require("../common");
var CONFIG = require("../config");
var MODULE_CTRL = require("./module_ctrl");
var CVE = require("../model/cve/cve_db");
var CVE_MODULE_DB = require("../model/module/module_cve_db");
var PRJ_MODULE_DB = require("../model/project/project_module_db");
var PRJ_CVE_DB = require("../model/project/project_cve_db");

var PATH = require('path');
var FS = require('fs');


const {
    Worker
  } = require('worker_threads');
////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////

const DEBUG = CONFIG.DEBUG;

/**
 * Logging object
 */
var log = require("../log").build("cve_ctrl");

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////

/**
 * Add CVE to db
 * Mapping CVE - Prj, CVE - module shall be added as well
 * @param {*} cveitem CVE Item object
 * @returns Promise, with cve_item
 */
function addCVE(cveitem){
    if (DEBUG) log.d(`add CVE ${cveitem.toString()}`);
    return new Promise((resolve, reject) => {
        // add to db
        CVE.add(cveitem)
            .then((item) => {
                if (DEBUG) log.d(`Added cve ${cveitem.vul_number} done, add module-cve mapping list`);
                // parse to gete module list basing on description
                return MODULE_CTRL.parseToGetModuleList(item.getDesc());
            })
            // list of module, from above "then"
            .then(moduleList => {
                if (DEBUG) log.dumpArray(moduleList, "moduleList");

                if (!COMMON.isEmpty(moduleList)){
                    if (DEBUG) log.dumpArray(moduleList, "module list");
                    // create mapping between module and cve
                    var requests = moduleList.map(element => {
                        if (DEBUG) log.d(`map cve id ${cveitem.id} and ${element}`);
                        return CVE_MODULE_DB.add(cveitem.id, element, []);
                    })
                    return new Promise((resolve2, reject2) => 
                            {
                                Promise.all(requests)
                                    .then(resolve2(moduleList))
                                    .catch(err => {
                                        log.e(`Failed to add mapping module - cve`);
                                        reject2(err);
                                    })
                            }
                            );
                }
                else{
                    log.i(`Not found any module list for cve ${cveitem.vul_number} `);
                    resolve(cveitem);
                    // not found any valid module list, done/stop
                }
            })
            // made mapping between cve and module
            // let's check mapping module vs project to get project list
            .then(function(moduleList){
                if (DEBUG) log.d("Added all mapping, check project");
                if (DEBUG) log.dumpArray(moduleList, "module list");

                if (!COMMON.isEmpty(moduleList)){
                        
                    var projectList = [];
                    let requests = moduleList.map(moduleid=>{
                        // try to find projects which have module
                        return new Promise((resolve3, reject3) => {
                            PRJ_MODULE_DB.getProjectListOfModule(moduleid)
                                .then(prjlist => {
                                    if (DEBUG) log.dumpArray(prjlist, "prjlist");
                                    if (DEBUG) log.d(`Found ${prjlist.length} project`);

                                    if (!COMMON.isEmpty(prjlist)){
                                        prjlist.forEach(prj => {
                                            if (!projectList.includes(prj.projectId)){
                                                projectList.push(prj.projectId);
                                            }
                                        })
                                    }
                                    else{
                                        if (DEBUG) log.d(`Not found any project for module ${moduleid}`);
                                    }

                                    resolve3(projectList);
                                    
                                })
                                .catch(err => {
                                    log.e(`Faild to get project list of module ${moduleid}`);
                                    reject3(err);
                                })
                                ;
                        }) 
                    });

                    return new Promise((resolve4, reject4) => 
                            {
                                Promise.all(requests)
                                    .then(function(){
                                        if (DEBUG) log.dumpArray(projectList, "ALL projectList");
                                        resolve4(projectList)}
                                    )
                                    .catch(err => {
                                        log.e(`Faild to get project list of all module`);
                                        reject4(err);
                                    })
                                    ;
                            });
                }
                else{
                    log.i(`No module, do nothing for mappign project - module`);
                    resolve(cveitem);
                }
                
            })
            // found project list for cve, basing on module, let make mapping
            .then(function(projectList){
                if (DEBUG) log.dumpArray(projectList, "get all project list callback");
                if (!COMMON.isEmpty(projectList)){
                    // add mapping prj - cve
                    let requests = projectList.map(prjid => {
                        if (DEBUG) log.d(`Add map for prj ${prjid} - cve ${cveitem.id}`);
                        // add mapping prj - cve
                        return PRJ_CVE_DB.add(prjid, cveitem.id);
                    });
                    
                    Promise.all(requests).then(function(){
                        log.i(`Added all mapping cve - prj`);
                        if (DEBUG) log.d(`Added all mapping prj-cve for cve ${cveitem.id} - ${cveitem.vul_number}`);
                        
                        resolve(cveitem);
                    });
                }
                else{
                    log.i(`Not found any project for cve ${cveitem.vul_number}`);
                    resolve(cveitem);
                }
                
            })
            // ERROR
            .catch(err => {
                log.e(`Oop! Error when adding cve to db, ${err}`);
                if (err instanceof ERR.ValError){
                    log.e(`Add cve ${cveitem.vul_number} failed with ValErr`);
                    
                    reject(err);
                }
                else{
                    log.e("Not a ValError, build one");
                    var retmsg = `Add cve ${cveitem.vul_number} failed, ${err}`;
                    log.e(retmsg);
                    reject(COMMON.buildError(retmsg, ERR.ErrFailed, cveitem, err));
                }
            });
    });
}

/**
 * Get Module List of CVEs
 * @param {*} result Query Result object, created by DB.buildQueryResult, contain LIST of cveitem
 * @returns Promise, with Query Result object, updated module list for CVEs
 */
function getModuleListOfCVEs(result){
    if (DEBUG) log.d("getModuleListOfCVEs");

    return new Promise ((resolve3, reject3) => {
        if (COMMON.isValidObj(result))
        {
            var cves = result.items;
            if (!COMMON.isEmpty(cves)){
                // FIXME: cves is alwasy array? or any risk that it's object, not array?????

                // try to get module list of all cves
                let requests = cves.map(cve => {
                    return new Promise((resolve2, reject2) => {
                        if (DEBUG) log.d(`Get module list for cve ${cve.id} (${cve.vul_number})`);
                        // get module list of one cve
                        CVE_MODULE_DB.getModuleListOfCVE(cve.id)
                            .then(moduleList => 
                                {
                                    // update module list of cve
                                    if (DEBUG) log.d("Get module list callback");
                                    if (DEBUG) log.dumpArray(moduleList, `Module list of ${cve.cve_number}`);
                                    
                                    if (!COMMON.isEmpty(moduleList)) {
                                        log.i(`Found ${moduleList.length} module for cve ${cve.vul_number}`);
                                        cve.modules = moduleList;
                                    }
                                    resolve2(cve);
                                })
                            .catch(err =>
                                {
                                    log.e(`Get module list of cve failed: ${err}`);
                                    // forward err to upper layer
                                    reject2(err);
                                })
                                ;
                    });
                });
        
                Promise.all(requests)
                    .then(function(){
                        if (DEBUG) log.d("Get module list for all cves done");
                        // get module list for all cves finished

                        resolve3(result);
                    })
                    .catch(err => { // failure
                        log.e(`Got module list of cve failed ${err}`);
                        reject3(err);
                    })
                ;
            }
            else{ // no cve to get
                log.e(`getModuleListOfCVEs failed, no cve`);
                reject3(COMMON.buildError(`Invalid input param, no cve`, ERR.ErrNoData));
            }
            
        }
        else{ // invalid input
            log.e(`getModuleListOfCVEs failed, Invalid result object`);
            reject3(COMMON.buildError(`Invalid input param`, ERR.ErrInvalid));
        }
        
    });
}

/**
 * Get Project List of CVEs
 * @param {*} result Query Result object, created by DB.buildQueryResult, contain LIST of cveitem
 * @returns Promise, with Query Result object, updated project list for CVEs
 */
function getProjectListOfCVEs(result){
    if (DEBUG) log.d("getProjectListOfCVEs");

    return new Promise ((resolve3, reject3) => {
        if (COMMON.isValidObj(result)){

            var cves = result.items;
            if (!COMMON.isEmpty(cves)){
                let requests = cves.map(cve => {
                    return new Promise((resolve4, reject4) => {
                        if (DEBUG) log.d(`Get prj list for cve ${cve.id} (${cve.vul_number})`);
                        PRJ_CVE_DB.getProjectListOfCve(cve.id)
                            .then(projectList => 
                                {
                                    if (DEBUG) log.d("Get prj list callback");
                                    if (DEBUG) log.dumpArray(projectList, `Prj list of ${cve.cve_number}`);
                                    if (!COMMON.isEmpty(projectList)) {
                                        log.i(`Found ${projectList.length} prj for cve ${cve.vul_number}`);
                                        cve.projects = projectList;
                                    }
                                    resolve4(cve);
                                })
                            .catch(err => {
                                log.e(`Get prj list of cve failed: ${err}`);
                                // forward err to upper layer
                                reject4(err);
                            })
                            ;
                    });
                });
        
                Promise.all(requests)
                    .then(function(){
                        // get prj list for all cves finished
                        if (DEBUG) log.d("Get prj list for all cves done");
                        resolve3(result);
                    })
                    .catch(err => {
                        log.e(`Got prj list of all cve failed ${err}`);
                        reject3(err);
                    })
                    ;
            }
            else{ // no cve to get
                log.e(`getProjectListOfCVEs failed, no cve`);
                reject3(COMMON.buildError(`Invalid input param, no cve`, ERR.ErrNoData));
            }

        }
        else{ // invalid input
            log.e(`getProjectListOfCVEs failed, Invalid result object`);
            reject3(COMMON.buildError(`Invalid input param`, ERR.ErrInvalid));
        }
        
    });
}

/**
 * Get CVE list of Project IDs
 * @param {*} projectId project ID, or list of project IDs
 * @param {*} page page number, -1 if get all
 * @param {*} perpage the number of items per page
 * @returns Promise, with Query Result object (DB.buildQueryResult)
 */
function getCVEListByProjectId(projectId, page = 1, perpage = 5){
    if (DEBUG) log.d(`getCVEListByProjectId, '${projectId}', ${page}, ${perpage}`);
    return new Promise((resolve, reject) => {
        //projectId shall be check by sub functions, hope so....
        
        CVE.getCVEbyProjectId(projectId, page, perpage)
            .then(function(result){
                if (COMMON.isEmpty(result.items)){
                    resolve(result);
                    return;
                }
                // result is Query Result (DB.buildQueryResult)
                // got cve list via Query Result, let's check module & project list of all cves
                return getProjectModuleOfCVE(result);                
            })
            .then(result => {
                // finished getting list of module & project of cves
                resolve(result);
            })
            .catch(err => {// f*cking failed
                log.e(`getCVEListByProjectId failed ${err}`);
                reject(err);
            })
            ;
    });
}

/**
 * Get list of Vul id by prj id
 * @param {*} projectId prj id
 * @returns Promise, return list of vul _id (db id) on success
 */
 function getVulIdByProjectId(projectId){
    // TODO: paging???
   if (DEBUG) log.d(`getVulIdByProjectId, '${projectId}'`);
   return CVE.getVulIdByProjectId(projectId);
}



/**
 * Get CVE list by module ids
 * @param {*} moduleId Module ID, or list of module ids. Ids is _id generated by db
 * @param {*} page page number, -1 if get all
 * @param {*} perpage the number of items per page
 * @returns Promise, with Query Result object (DB.buildQueryResult)
 */
function getCVEListByModule(moduleId, page, perpage){
    if (DEBUG) log.d(`getCVEListByModule, '${moduleId}', ${page}, ${perpage}`);
    return new Promise((resolve, reject) => {
        //FIXME: moduleId shall be check by sub-function, hope so

        CVE.getCVEbyModuleId(moduleId, page, perpage)
            .then(function(result){
                if (COMMON.isEmpty(result.items)){
                    resolve(result);
                    return;
                }
                // result is Query Result (DB.buildQueryResult)
                // got cve list via Query Result, let's check module & project list of all cves
                return getProjectModuleOfCVE(result);                
            })
            .then(result => {
                // finished getting list of module & project of cves
                resolve(result);
            })
            .catch(err => {// f*cking failed
                log.e(`getCVEListByModule failed ${err}`);
                reject(err);
            })
            ;
    });
}

/**
 * Get list of Vul id by module id
 * @param {*} moduleId module id
 * @returns Promise, return list of vul _id (db id) on success
 */
 function getVulIdByModuleId(moduleId){
    // TODO: paging???
   if (DEBUG) log.d(`getVulIdByModuleId, '${moduleId}'`);
   return CVE.getVulIdByModuleId(moduleId);
}



/**
 * Get list of modules and projects of CVEs
 * @param {*} result Query Result object (DB.buildQueryResult)
 * @returns Promise, with Query Result Object, and cves updated modules & projects list
 */
function getProjectModuleOfCVE(result){
    if (DEBUG) log.d(`getProjectModuleOfCVE`);
    return new Promise((resolve, reject) => {
        // get module list of cves first
        getModuleListOfCVEs(result)
            .then(result => {
                if (DEBUG) log.d(`getModuleListOfCVEs ok`);
                // get module list done, try to get project list
                return getProjectListOfCVEs(result);
            })
            .then(result => {

                if (DEBUG) log.d(`getProjectListOfCVEs ok`);
                // all done
                log.i(`Got all module/project for all cves`);
                resolve(result);
            })
            .catch(err => {// f*cking failed
                log.e(`getProjectModuleOfCVE failed ${err}`);
                reject(err);
            })
            
            ;
    });
}

/**
 * Get CVE list
 * @param {*} keyword search keyword, a string or list of string
 * @param {*} page page number, -1 to get all
 * @param {*} perpage 
 * @returns Promise, with Query Object (DB.buildQueryResult)
 */
function getCVEList(keyword, page = 1, perpage = 5){
    if (DEBUG) log.d(`getCVEList, '${keyword}', ${page}, ${perpage}`);
    return new Promise((resolve, reject) => {
        // searc db
        // FIXME: assume keyword shall be checked by sub-function
        CVE.search(keyword, page, perpage)
            .then(function(result){
                if (DEBUG) {
                    log.d(`getCVEList search done, start query project & module`);
                    log.d(`Found ${result.totalitems}`);
                }

                if (COMMON.isEmpty(result.items)){
                    resolve(result);
                    return;
                }

                // got result, let's check project & module list
                return getProjectModuleOfCVE(result);                
            })
            .then(result => { // get prj/mod done
                log.i(`getCVEList all ok`);
                resolve(result);
            })
            .catch(err => {// f*cking failed
                log.e(`getCVEList failed ${err}`);
                reject(err);
            })
            ;
    });
}

/**
 * Get list of Vul id by keyword
 * @param {*} keyword Keyword
 * @returns Promise, return list of vul _id (db id) on success
 */
 function getVulIdByKeyword(keyword){
     // TODO: paging???
    if (DEBUG) log.d(`getVulIdByKeyword, '${keyword}'`);
    return CVE.getVulIdByKeyword(keyword);
}


/**
 * Get Vulneratbilies by Import Id
 * @param {*} importId Import Id
 * @param {*} page page, -1 to get all
 * @param {*} perpage item per page
 * @returns Promise, with Query Object (DB.buildQueryResult)
 */
function getVulByImport(importId, page = 1, perpage = 5){
    if (DEBUG) log.d(`getVulByImport, '${importId}', ${page}, ${perpage}`);
    return new Promise((resolve, reject) => {
        // searc db
        // FIXME: assume importId shall be checked by sub-function
        CVE.getVulByImport(importId, page, perpage)
            .then(function(result){
                if (DEBUG) {
                    log.d(`getVulByImport search done, start query project & module`);
                    log.d(`Found ${result.totalitems}`);
                }

                // got result, let's check project & module list
                return getProjectModuleOfCVE(result);                
            })
            .then(result => { // get prj/mod done
                log.i(`getVulByImport all ok`);
                resolve(result);
            })
            .catch(err => {// f*cking failed
                log.e(`getVulByImport failed ${err}`);
                reject(err);
            })
            ;
    });
}

/**
 * Get list of Vul id by import Id
 * @param {*} importId Import ID
 * @returns Promise, return list of vul _id (db id) on success
 */
function getVulIdByImport(importId){
    // TODO: paging???
    if (DEBUG) log.d(`getVulIdByImport, '${importId}'`);
    return CVE.getVulIdByImport(importId);
}

/**
 * Get detail infor of CVE
 * @param {*} id id, can be DB ID -> Vul ID -> CVE ID
 * @param {*} callback callback function, with error coe and data (Err object if error, or CVE item if ok)
 */
function getCVE(id, callback = null){
    if (DEBUG) log.d(`getCVE, '${id}'`);
    // Query db
    return new Promise ((resolve, reject) => 
        {
        CVE.getByAnyId(id)
            .then(function(cveItem){
                // found one
                if (DEBUG) log.d(`Get cve ok, ${cveItem.toString()}`);
                // continue to process in next "then"
                return new Promise ((resolve2, reject2) => { 

                    if (COMMON.isValidObj(cveItem)){
                        // get module list of CVE
                        CVE_MODULE_DB.getModuleListOfCVE(cveItem.id)
                            .then(moduleList => 
                                {
                                    if (DEBUG) log.d("Get module list callback");
                                    if (DEBUG) log.dumpArray(moduleList, `Module list of ${cveItem.cve_number}`);
                                    if (!COMMON.isEmpty(moduleList)) cveItem.modules = moduleList;
                                    resolve2(cveItem);
                                })
                            .catch((err)=>{
                                log.e(`Get module list of cve ${id} failed" ${err}`);
                                reject2(err);
                            });

                    }
                    else{ // invalid result
                        log.e(`Not found info for ${id}`);
                        reject2(COMMON.buildError(`Not found info for ${id}`, ERR.ErrNotFound, id));
                    }
                });
                
                
            })
            .then(cveItem => { 
                // reach here, mean cveitem is not null, maybe??
                // get Prj list of CVE
                PRJ_CVE_DB.getProjectListOfCve(cveItem.id)
                    .then(projectList => 
                        {
                            if (DEBUG) log.d("Get prj list callback");
                            if (DEBUG) log.dumpArray(projectList, `Prj list of ${cveItem.cve_number}`);
                            if (!COMMON.isEmpty(projectList)) cveItem.projects = projectList;
                            if (callback != null)
                                callback(ERR.ErrNone, cveItem);
                            else
                                resolve(cveItem)
                        })
                    .catch((err)=>{
                        log.e(`Get prj list of cve ${id} failed" ${err}`);
                        if (callback != null)
                            callback(ERR.ErrFailed, err);
                        else
                            reject(err);
                    });
            })
            .catch((err)=>{
                log.e(`Get cve ${id} failed" ${err}`);
                if (callback != null)
                    callback(ERR.ErrFailed, err);
                else
                    reject(err);
            });
        });
}

function setVulProjects(id, projectIds, pjStatus){
    log.d(`setVulProjects, id ${id}`);
    log.raw(projectIds, "projectIds");
    return new Promise((resolve, reject) => {
        log.d(`setVulProjects Delete all prj of vul ${id}`);
        PRJ_CVE_DB.delAllPrjOfVul(id)
            .then((cnt) => {
                log.d(`setVulProjects Delete done, add prj for vul ${id}`);
                addVulProjects(id, projectIds, pjStatus)
                    .then(id => {
                        log.d(`setVulProjects add ok`);
                        resolve(id);
                    })
                    .catch(err => {
                        log.e(`setVulProjects add err ${err}`);
                        reject(err);
                    })
                    ;
            })
            .catch(err => {
                log.e(`setVulProjects del err ${err}`);
                reject(err);
            });
        ;
        
    });

}


function delVulProjects(id, projectIds){
    log.d(`delVulProjects, id ${id}`);
    log.raw(projectIds, "projectIds");
    return new Promise((resolve, reject) => {

        var reqs = projectIds.map(projectId => {
            log.d(`delVulProjects, prjid ${projectId} to  ${id}`);
            return PRJ_CVE_DB.delPrjOfVul(id, projectId);
        });

        Promise.all(reqs)
            .then(()=>{
                log.d(`delVulProjects, All id deleted`);
                resolve(id);
            })
            .catch(err => {
                log.e(`delVulProjects delete failed, ${err}`);
                reject(err);
            })
        ;
    });

}


function addVulProjects(id, projectIds, vulStatus){
    log.d(`addVulProjects, id ${id}`);
    log.raw(projectIds, "projectIds");
    return new Promise((resolve, reject) => {

        var reqs = projectIds.map(projectId => {
            log.d(`addVulProjects, add prjid ${projectId} to  ${id}`);
            return PRJ_CVE_DB.add(projectId, id, null, vulStatus);
        });

        Promise.all(reqs)
            .then(()=>{
                log.d(`addVulProjects, All id added`);
                resolve(id);
            })
            .catch(err => {
                log.e(`addVulProjects add failed, ${err}`);
                reject(err);
            })
        ;
    });
    
}



function setVulModules(id, modules){
    log.d(`setVulModules, id ${id}`);
    log.raw(modules, "modules");
    return new Promise((resolve, reject) => {
        log.d(`setVulModules Delete all prj of vul ${id}`);
        CVE_MODULE_DB.delAllModuleOfVul(id)
            .then((cnt) => {
                log.d(`setVulModules Delete done, add mod for vul ${id}`);
                addVulModules(id, modules)
                    .then(id => {
                        log.d(`setVulModules add ok`);
                        resolve(id);
                    })
                    .catch(err => {
                        log.e(`setVulModules add err ${err}`);
                        reject(err);
                    })
                    ;
            })
            .catch(err => {
                log.e(`setVulModules del err ${err}`);
                reject(err);
            });
        ;
        
    });

}


function delVulModules(id, modules){
    log.d(`delVulModules, id ${id}`);
    log.raw(modules, "modules");
    return new Promise((resolve, reject) => {

        var reqs = modules.map(module => {
            var [name, version] = module.split(":");
            log.d(`delVulModules, module name ${name} from vul id ${id}`);
            return CVE_MODULE_DB.delModOfVulWithModuleName(id, name);
        });

        Promise.all(reqs)
            .then(()=>{
                log.d(`delVulModules, All id deleted`);
                resolve(id);
            })
            .catch(err => {
                log.e(`delVulModules delete failed, ${err}`);
                reject(err);
            })
        ;
    });
}

function addVulModules(id, modules){
    log.d(`addVulModules ${id}`);
    log.raw(modules, "modules");
    return new Promise((res, rej) => {
        log.d(`addVulModules add modules first if not exist`);
        MODULE_CTRL.addModules(modules) // modules is list of module, in format: name[:version]
            .then(moduleList => {
                log.d(`Added module ok`);
                log.raw(moduleList, "moduleList");
                if (!COMMON.isEmpty(moduleList))
                {
                    log.d(`Add mapping module-cve`);
                    
                    var addreqs = moduleList.map(ele => {
                        log.d(`Add module - cve ${ele.id} - ${id}`);
                        log.raw(ele.versions, "ele.versions");
                        return CVE_MODULE_DB.add(id, ele.id, ele.versions);
                    })

                    Promise.all(addreqs).then(()=>{
                        log.d(`All module - cve added`);
                        res(id);
                    })
                    .catch(err => {
                        log.e(`Add mapping module - cve failed ${err}`);
                        rej(err);
                    })
                    ;
                }
                else{
                    log.d(`No module - cve to add,next`);
                    res(id);                                         
                }
            })
            .catch(err => {
                log.e(`Add module failed ${err}`);
                res(err);
            })
            ;
    });
    
}

function setVulTags(id, tags){
    return CVE.setTags(id, tags);
}
function delVulTags(id, tags){
    return CVE.deleteTags(id, tags);
}
function addVulTags(id, tags, updatelist = false){
    return CVE.updateTags(id, tags, updatelist);
}

function updateVulStatus(id, status){
    return CVE.updateStatus(id, status);
}

function updateVulPrjStatus(id, projectIds, status){
    log.d(`updateVulPrjStatus ${status}`);
    return new Promise((resolve, reject) => {

        var reqs = projectIds.map(projectId => {
            return PRJ_CVE_DB.updateStatusProject(projectId, id, status);
        });

        Promise.all(reqs).then(()=>{
            resolve(id);
        });
    });
}

////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////
exports.addCVE = addCVE;
exports.getCVEList = getCVEList;
exports.getCVEListByProjectId = getCVEListByProjectId;
exports.getCVEListByModule = getCVEListByModule;
exports.getCVE = getCVE;
exports.getVulByImport = getVulByImport;
exports.getVulIdByImport = getVulIdByImport;
exports.getVulIdByKeyword = getVulIdByKeyword;
exports.getVulIdByModuleId = getVulIdByModuleId;
exports.getVulIdByProjectId = getVulIdByProjectId;


exports.addVulModules = addVulModules;
exports.setVulModules = setVulModules;
exports.delVulModules = delVulModules;

exports.addVulProjects = addVulProjects;
exports.setVulProjects = setVulProjects;
exports.delVulProjects = delVulProjects;

exports.addVulTags = addVulTags;
exports.setVulTags = setVulTags;
exports.delVulTags = delVulTags;

exports.updateVulStatus = updateVulStatus;
exports.updateVulPrjStatus = updateVulPrjStatus;
