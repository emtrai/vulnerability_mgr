/**
 * Copyright (C) 2022 Anh Huy Ngo - All Rights Reserved
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * Author: Anh Ngo
 * Created Date: 
 */
'use strict';
////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////

var ERR = require("../errno");
var COMMON = require("../common");
var PROJECTDB = require('../model/project/project_db');
var MODULE_CTRL = require('../controller/module_ctrl');
var PROJECT_MODULE_DB = require('../model/project/project_module_db');
var PROJECT_CVE_DB = require('../model/project/project_cve_db');
var TAGS = require('./tags_ctrl');

////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////


var log = require("../log").build("prjctrl");

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////

/**
 * Get list of project
 * @param {*} callback null if return result via promise
 * @returns Promise. If call is null, result is returned via Promise
 */
function getListProjects(callback){
    log.d("Get list of project")
    return PROJECTDB.getListProject(callback);
}

/**
 * Check if project exist
 * @param {*} projectId project id (db id)
 * @param {*} callback null if return result via promise
 * @returns Promise. If call is null, result is returned via Promise
 */
function checkIfProjectIdExist(projectId, callback){
    log.d("checkIfProjectIdExist")
    var promise =  PROJECTDB.checkIfProjectIdExist(projectId);
    if (callback != null)
    {
        promise.then(result => {
            callback(ERR.ErrNone, result);
        })
        .catch(err => {
            callback(ERR.ErrFailed, err);
        })
        ; 
    }
    return promise;    
}

/**
 * Get list of project, and its associated modules
 * @param {*} callback callback (err code, data)
 */
function getListProjectsWithModule(callback){
    log.d("Get list of project, with module info")
    PROJECTDB.getListProject(function(err, items){
        // get list of project and their associated module
        let requests = items.map (item => {
            log.d(`getListProjectsWithModule callback ${item}`);
            return new Promise((resolve, reject) => {
                PROJECT_MODULE_DB.getModuleListOfProject(item.id)
                    .then(modules => {
                        item.modules = modules;
                        resolve(item);
                    })
                    .catch(err => {
                        log.e(`get module list failed ${err}`);
                        reject(err);
                    })
                ;
            });
        });

        Promise.all(requests)
            .then(function(){
                
                // count cve
                let requestsCountCVE = items.map (item => {
                    log.d(`getListProjectsWithModule callback ${item}`);
                    return new Promise((resolve, reject) => {
                        PROJECT_CVE_DB.countCVEByPrjId(item.id).then(noCVE => {
                            item.noCVE = noCVE;
                            resolve(item);
                        });
                    });
                });
                Promise.all(requestsCountCVE)
                    .then(()=>{
                        log.d(`Count cve ok`);
                        callback(ERR.ErrNone, items);
                    })
                    .catch(err => {
                        log.e(`Count cve failed ${err}`);
                        callback(ERR.ErrFailed, err);
                    })
                    ;
            })
            .catch(err => {
                log.e(`Get project list failed ${err}`);
                callback(ERR.ErrFailed, err);
            })
            ;


    });
}

/**
 * Add project
 * @param {*} name Name, must be unique
 * @param {*} desc 
 * @param {*} tags 
 * @param {*} modules List of module, in format name[:version]
 * @param {*} callback callback (error code, data)
 */
function addProject(name, desc, tags, modules, callback){
    // TODO: auto re-scan vul to assign Vul for projects
    log.d(`addProject ${name}`);
    var item = PROJECTDB.buildItem();
    item.name = name;
    item.desc = desc;
    if (!COMMON.isEmpty(tags)){
        tags.forEach(element => {
            item.tags.push(element);
        });
    }

    // add to db
    PROJECTDB.add(item).then(item => {
        log.d(`Callback from project added, item ${item.name}`);

        
        // added ok, update tag
        log.i("Update tags");
        item.tags.forEach(element => {
            log.d(`Add tag ${element}`);
            TAGS.addTag(element);
        });

        // added ok, update mapping between module and project
        var moduleitems = [];
        if (!COMMON.isEmpty(modules)){
            log.i("Update modules");

            // add module if any
            let requests = modules.map(element => {
                var [name, version] = element.split(":");
                if (!COMMON.isEmpty(name)){
                    var versions = [];
                    if (!COMMON.isEmpty(version)){
                        versions.push(version);
                    }

                    
                    return new Promise((resolve, reject) => {
                        log.d(`Add module ${name}, version ${version}`);
                        MODULE_CTRL.add(name, "", "", versions, null, function(ret, module){
                            if ((ret == ERR.ErrNone) || (ret == ERR.ErrExist))
                            {
                                log.d(`Added module ok, id ${module.id}, version ${versions}`);
                                moduleitems.push({
                                    module:module,
                                    versions:versions
                                });
                                resolve(module);
                            }
                            else{
                                reject(COMMON.buildError("Add module failed", ret));
                            }
                        });

                        
                    });
                }
                else{
                    return new Promise((resolve, reject) => {
                        reject(new Error("Empty name"));
                    })
                }

                
            });
            Promise.all(requests)
                .then(function(){

                    // add mapping module - project
                    log.i(`Added all modules to project ${name}, id ${item.id}`);
                    let mapReqs = moduleitems.map(element => {
                        log.d(`add mapping, module name ${element.module.name}, ${element.module.id}, ${element.versions}`);
                        return PROJECT_MODULE_DB.add(item.id, element.module.id, element.versions);
                    });
                    return mapReqs;
                })
                .then(function(reqs){
                    log.i(`Mapping all modules to project ok, call callback`);
                    Promise.all(reqs)
                    .then(function(){
                        callback(ERR.ErrNone, item);
                    });
                })
                .catch(function(err){
                    log.i(`Mapping all modules to project FAILED, call callback`);
                    callback(ERR.ErrFailed, item, err);
                });
        }

        })
        .catch(err =>{
            var [msg, code, data] = COMMON.parseError(err);
            callback(code, data, msg);
        })
        ;
}

////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////
exports.getListProjects = getListProjects;
exports.getListProjectsWithModule = getListProjectsWithModule;
exports.addProject = addProject;
exports.checkIfProjectIdExist = checkIfProjectIdExist;