/**
 * Copyright (C) 2022 Anh Huy Ngo - All Rights Reserved
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * Author: Anh Ngo
 * Created Date: 
 */
'use strict';
////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////

var ERR = require("../errno");
var COMMON = require("../common");
var PROJECTDB = require('../model/project/project_db');
var MODULE_CTRL = require('../controller/module_ctrl');
var PROJECT_MODULE_DB = require('../model/project/project_module_db');
var TAGS = require('./tags_ctrl');

////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////


var log = require("../log").build("prjctrl");

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////

function getListProjects(callback){
    log.d("Get list of project")
    PROJECTDB.getListProject(function(err, items){
        callback(err, items);
    });
}

function getListProjectsWithModule(callback){
    log.d("Get list of project, with module info")
    PROJECTDB.getListProject(function(err, items){
        // callback(err, items);
        // items.forEach(item => {

        //     log.d(`getListProjectsWithModule callback ${item}`);
        //     PROJECT_MODULE_DB.getModuleListOfProject(item.id).then(modules => {
        //         item.modules = modules;
        //     });
        // });
        let requests = items.map (item => {
            log.d(`getListProjectsWithModule callback ${item}`);
            return new Promise((resolve, reject) => {
                PROJECT_MODULE_DB.getModuleListOfProject(item.id).then(modules => {
                    item.modules = modules;
                    resolve(item);
                });
            });
        });

        Promise.all(requests).then(function(){
            callback(err, items);
        });
    });
}

function mapModuleProject(projectid, moduleid, versions){

}

function addProject(name, desc, tags, modules, callback){
    log.d(`addProject ${name}`);
    var item = PROJECTDB.buildItem();
    item.name = name;
    item.desc = desc;
    if (!COMMON.isEmpty(tags)){
        tags.forEach(element => {
            item.tags.push(element);
        });
    }

    
    // PROJECTDB.add(item, function(ret, item, ret_msg){
    //     log.d(`Callback from project added, ret ${ret}, item ${item.name}`);
    //     if (ret != ERR.ErrNone){
    //         callback(ret, item, ret_msg);
    //     }
    //     // added ok, update tag
    //     log.i("Update tags");
    //     item.tags.forEach(element => {
    //         log.d(`Add tag ${element}`);
    //         TAGS.addTag(element);
    //     });

    //     // added ok, update mapping between module and project
    //     var moduleitems = [];
    //     if (!COMMON.isEmpty(modules)){
    //         log.i("Update modules");
    //         // modules.forEach((element, idx, array) => {
    //         //     var [name, version] = element.split(":");
    //         //     if (!COMMON.isEmpty(name)){
    //         //         MODULE_CTRL.getModule(name)
    //         //             .then(module => {
    //         //                 moduleitems.push({
    //         //                     module:module,
    //         //                     version:version
    //         //                 });
    //         //             })
    //         //             .catch(err => {

    //         //             });
    //         //     }
    //         // });
    //         let requests = modules.map(element => {
    //             var [name, version] = element.split(":");
    //             if (!COMMON.isEmpty(name)){
    //                 var versions = [];
    //                 if (!COMMON.isEmpty(version)){
    //                     versions.push(version);
    //                 }
    //                 // return MODULE_CTRL.getModule(name);
    //                 return new Promise((resolve, reject) => {
    //                     log.d(`Add module ${name}, version ${version}`);
    //                     MODULE_CTRL.add(name, "", "", versions, function(ret, module){
    //                         log.d("Added module ok");
    //                         resolve(module);
    //                         moduleitems.push({
    //                             module:module,
    //                             version:versions
    //                         });
    //                     });
    //                     // MODULE_CTRL.getModule(name)
    //                     // .then(module => {
    //                     //     moduleitems.push({
    //                     //         module:module,
    //                     //         version:version
    //                     //     });
    //                     //     resolve(module);
    //                     // })
    //                     // .catch(err => {
    //                     //     reject(err);
    //                     // });
    //                 });
    //             }
    //             else{
    //                 return new Promise((resolve, reject) => {
    //                     reject(new Error("Empty name"));
    //                 })
    //             }

                
    //         });
    //         Promise.all(requests)
    //             .then(function(){
    //                 // callback(ret, item, ret_msg);
    //                 log.i(`Added all modules to project ${name}`);
    //                 let mapReqs = moduleitems.map(element => {
    //                     return PROJECT_MODULE_DB.add(item.id, element.id, element.versions);
    //                 });
    //                 return mapReqs;
    //             })
    //             .then(function(reqs){
    //                 log.i(`Mapping all modules to project ok, call callback`);
    //                 Promise.all(reqs)
    //                 .then(function(){
    //                     callback(ERR.ErrNone, item);
    //                 });
    //             })
    //             .catch(function(err){
    //                 log.i(`Mapping all modules to project FAILED, call callback`);
    //                 callback(ERR.ErrFailed, item, err);
    //             });
    //     }



    //     // callback(ret, item, ret_msg);
    // });

    PROJECTDB.add(item).then(item => {
        log.d(`Callback from project added, item ${item.name}`);
        // if (ret != ERR.ErrNone){
        //     callback(ret, item, ret_msg);
        // }
        // added ok, update tag
        log.i("Update tags");
        item.tags.forEach(element => {
            log.d(`Add tag ${element}`);
            TAGS.addTag(element);
        });

        // added ok, update mapping between module and project
        var moduleitems = [];
        if (!COMMON.isEmpty(modules)){
            log.i("Update modules");
            // modules.forEach((element, idx, array) => {
            //     var [name, version] = element.split(":");
            //     if (!COMMON.isEmpty(name)){
            //         MODULE_CTRL.getModule(name)
            //             .then(module => {
            //                 moduleitems.push({
            //                     module:module,
            //                     version:version
            //                 });
            //             })
            //             .catch(err => {

            //             });
            //     }
            // });
            let requests = modules.map(element => {
                var [name, version] = element.split(":");
                if (!COMMON.isEmpty(name)){
                    var versions = [];
                    if (!COMMON.isEmpty(version)){
                        versions.push(version);
                    }
                    // return MODULE_CTRL.getModule(name);
                    return new Promise((resolve, reject) => {
                        log.d(`Add module ${name}, version ${version}`);
                        MODULE_CTRL.add(name, "", "", versions, null, function(ret, module){
                            if ((ret == ERR.ErrNone) || (ret == ERR.ErrExist))
                            {
                                log.d(`Added module ok, id ${module.id}, version ${versions}`);
                                moduleitems.push({
                                    module:module,
                                    versions:versions
                                });
                                resolve(module);
                            }
                            else{
                                reject(COMMON.buildError("Add module failed", ret));
                            }
                        });
                        // MODULE_CTRL.getModule(name)
                        // .then(module => {
                        //     moduleitems.push({
                        //         module:module,
                        //         version:version
                        //     });
                        //     resolve(module);
                        // })
                        // .catch(err => {
                        //     reject(err);
                        // });
                    });
                }
                else{
                    return new Promise((resolve, reject) => {
                        reject(new Error("Empty name"));
                    })
                }

                
            });
            Promise.all(requests)
                .then(function(){
                    // callback(ret, item, ret_msg);
                    log.i(`Added all modules to project ${name}, id ${item.id}`);
                    let mapReqs = moduleitems.map(element => {
                        log.d(`add mapping, module name ${element.module.name}, ${element.module.id}, ${element.versions}`);
                        return PROJECT_MODULE_DB.add(item.id, element.module.id, element.versions);
                    });
                    return mapReqs;
                })
                .then(function(reqs){
                    log.i(`Mapping all modules to project ok, call callback`);
                    Promise.all(reqs)
                    .then(function(){
                        callback(ERR.ErrNone, item);
                    });
                })
                .catch(function(err){
                    log.i(`Mapping all modules to project FAILED, call callback`);
                    callback(ERR.ErrFailed, item, err);
                });
        }
           // callback(ret, item, ret_msg);
        })
        .catch(err =>{
            var [msg, code, data] = COMMON.parseError(err);
            callback(code, data, msg);
        })
        ;
}

function updateProject(id, name, desc, tags){
    
}
////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////
exports.getListProjects = getListProjects;
exports.getListProjectsWithModule = getListProjectsWithModule;
exports.addProject = addProject;