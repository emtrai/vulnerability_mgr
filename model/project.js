////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////

var errno = require("../errno");
var log = require("../log").build("project");

var ModDb = require('../db/db');
const { UUID } = require('bson');
var mongoose = require('mongoose')

////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////

// project include multiple domain
var project_schema = new mongoose.Schema({
    name:String,
    parent:[mongoose.ObjectId], // parent project id, inherit all information
    tags:[String],
    desc:String,
    variant:[String], // BEV, ICE, etc.
    market:[String], // VN, US, Global, etc.
    domain:[{type:Map, of: String}],
    components:[mongoose.ObjectId], // list of component
    history:String,// history of component
    created_date:Number, // date of creation
    modified_date:Number, // last modified time
});

var PROJECTS = mongoose.model("projects", project_schema);

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////

/**
 * Get project from db, if not exist, build one
 */
function getListProject(callback){
    log.d("getListProject");
    
    ModDb.connectdbsync(null);
    PROJECTS.count(function(err, count) {
        if (err) {
            log.e("Get all failed, cannot count");
            log.e(err);
            return;
        }
        log.d(`PROJECT count ${count}`);
        // var totalpages = (count/perpage + 1) | 0;
        // // var totalpages = (page + 1)*perpage >= count;
        // log.d(`totalpages ${totalpages}`);
        // CVE.find({})
        //     // .sort('vul_id',1)
        //     .skip((page-1) * perpage)
        //     .limit(perpage)
        //     .exec(function(err, cves){

        //     var cve_items = [];
        //     if (cves){
        //         log.i("Found cves");
        //         cves.forEach(function(element){
        //             log.i(`found cve ${element.cve_id}`);
        //             var item = cveDB2cveItem(element);
        //             // item = ModCVEItem.buildItem();
        //             // item.cve_id = element.cve_id;
        //             // element.cve_desc.forEach(desc => item.desc.push(ModCommon.fromBase64(desc)));
        //             // item.source = element.cve_source;
                    
        //             cve_items.push(item);
                    
        //         });
        //     }
        //     else{
        //         log.i("not found any cve");
        //     }
            
        //     callback(cve_items, totalpages);
        // });
    });
}


////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////
// module.exports = project;
module.exports.getListProject = getListProject;