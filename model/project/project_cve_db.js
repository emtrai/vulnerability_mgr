const { UUID } = require('bson');
var MONGOOSE = require('mongoose')

var ERR = require("../../errno");
var COMMON = require("../../common");

var PROJECT = require('./project_db')

var DB = require('../../db/db');
// var MODULE = require('././module/module_cve_db');

////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////

var log = require("../../log").build("project_cve");
const SCHEMA_NAME = "project_cve";

MONGOOSE.pluralize(null);
var cve_status_schema = new MONGOOSE.Schema({
    cveId:MONGOOSE.ObjectId,
    projectId:MONGOOSE.ObjectId, // project
    // vul_id:String, // vulnerablities id, instead of cve id, as some issue not assign cve number yet
    status:{type:Number, default:DB.STATUS_INACTIVE}, // status: active, on-hold, etc.
    vulStatus:Number, // opened, skipped, tested, patched
    desc:String,
    note:String,
    patchedDate:Number,
    history:String,
    lastModifiedDate:Number,
    addedDate:Number,
    assignment:String,
    ticket:String,
    metaInfo:String,
});

var THIS_SCHEMA = MONGOOSE.model(SCHEMA_NAME, cve_status_schema);

const VUL_STATUS_IN_ACTIVE = 0;

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////
function buildItem(){
    log.d("Build project-cve item");
    return {
        id:null,
        projectId:null,
        cveId:null,
        vulStatus:VUL_STATUS_IN_ACTIVE,
        toString:function(){
            return `${this.id};${this.cveId};${this.projectId};${this.vulStatus}`;
        },
        
    };
}

function db2Item(db, item = null){    
    if (!item){
        item = buildItem();
    }
    // TODO: validate info

    item.id = db._id;
    item.projectId = db.projectId;
    item.cveId = db.cveId;
    item.vulStatus = db.vulStatus;
    item.projectName = db.projectName;
    
    
    return item;
}


function add(projectId, cveId, status=VUL_STATUS_IN_ACTIVE){
    log.i(`add mapping project ${projectId}, cve ${cveId}, status ${VUL_STATUS_IN_ACTIVE}`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        THIS_SCHEMA.findOne({projectId:projectId, cveId:cveId}, function(err, itemdb){
            log.d(`findOne callback`);
            var ret = ERR.ErrFailed;
            var ret_msg = "Failed";
            if (err){
                reject(err);
                return;
            }
            // TODO: add tags
            if (itemdb){ // existed, update other information like version if any
                log.i(`mapping ${projectId} - ${moduleId},already exist, check version ${moduleVersions}`);
                resolve(db2Item(itemdb));
            }
            else{
                            
                var itemdb = new THIS_SCHEMA();
                itemdb.projectId = projectId;
                itemdb.cveId = cveId;
    
                log.i(`Mapping not exist, create new`);
                

                itemdb.addedDate = COMMON.currentTimeMs();
                itemdb.lastModifiedDate = COMMON.currentTimeMs();
                // TODO: update history?
                // TODO: add tags
                ret = ERR.ErrNone;
                ret_msg = "Add new mapping prj-cve OK";
                itemdb.save((err, itemdb2)=>{
                    if (err){
                        log.i(`Add prj-cve map failed ${err}`);
                        reject(err);
                    }
                    else{
                        log.i(`Add prj-cve map OK`);
                        resolve(db2Item(itemdb2));
                    }
                    
                });
                // TODO: handle error case
            }
            
            // if (callback)
            //     callback(ret, this.name, ret_msg);
        });
        // }.bind({nameid:Object.assign({}, nameid), name:Object.assign({}, name), versions:Object.assign({}, versions)}));
    });
}

function getProjectListOfCve(cveId){
    log.d(`getProjectListOfCve ${cveId}`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        THIS_SCHEMA.aggregate([
            {
                $lookup: {
                    from:PROJECT.SCHEMA_NAME, // collection name in db
                    localField: "projectId",
                    foreignField: "_id",
                    as: "projectinfo"
                },
            },
            {   $unwind:"$projectinfo" },
            {
                $match:{
                    $and:[{"cveId" : cveId}]
                }
            },
            {   
                $project:{
                    _id : 1,
                    projectId:1,
                    cveId:1,
                    projectName : "$projectinfo.name",
                } 
            },
    
    ]).exec(function(err, projects) {

        log.d(`getProjectListOfCve ${cveId} CALLBACK`);
            if (err){
                reject(COMMON.buildError(`Failed to get project list for cve ${cveId}`, ERR.ErrFailed, err));
            }
            else{
                // log.d(projects);
                var projectList = [];
                projects.forEach(prj => {
                    // log.d(`${module.name}, ${module.moduleVersions}`);
                    // console.log(module);
                    projectList.push(db2Item(prj));
                })
                resolve(projectList);
            }
        }); 
    });
}


function getCVEIdByListPrjName(listName, page = 1, perpage = 5){
    log.d(`getCVEByListPrjName ${listName}`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        var condition = [];

        if (!COMMON.isEmpty(listName)){
            listName.forEach(element => {
                let regex = new RegExp(element,'i');
                condition.push({"projectinfo.name": regex });
            })
        }

        var query = THIS_SCHEMA.aggregate([
            {
                $lookup: {
                    from:PROJECT.SCHEMA_NAME, // collection name in db
                    localField: "projectId",
                    foreignField: "_id",
                    as: "projectinfo"
                },
            },
            {   $unwind:"$projectinfo" },
            {
                $match:{
                    $or:condition
                }
            },
            {   
                $project:{
                    cveId:1,
                } 
            },
        
    
            ]);
        if (page > 0){
            query
                .skip((page-1) * perpage)
                .limit(perpage);
        }
        query.exec(function(err, items) {
            log.d(`getCVEIdByListPrjName CALLBACK`);
            var cveIds = [];
            if (err){
                reject(COMMON.buildError(`Failed to get cve id by prj name list`, ERR.ErrFailed, err));
            }
            else{
                log.i(`Found cves ${items.length}`);
                items.forEach(function(element){
                    log.i(`found cve ${element.cveId}`);                
                    cveIds.push(element.cveId);
                    
                });
                resolve(DB.buildQueryResult(cveIds));
            }
        }); 
    });
}


function countCVEByListPrjName(listName){
    log.dumpArray(listName, "countCVEByPrjName");
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        var condition = [];

        if (!COMMON.isEmpty(listName)){
            listName.forEach(element => {
                let regex = new RegExp(element,'i');
                condition.push({"projectinfo.name": regex });
            })
        }

        THIS_SCHEMA.aggregate([
            {
                $lookup: {
                    from:PROJECT.SCHEMA_NAME, // collection name in db
                    localField: "projectId",
                    foreignField: "_id",
                    as: "projectinfo"
                },
            },
            {   $unwind:"$projectinfo" },
            {
                $match:{
                    $or:condition
                }
            },
            { $count: "Total" }
        
    
    ]).exec(function(err, projects) {
        log.d(`countCVEByPrjName  callback`);
        console.log(projects);
        resolve(projects);
        // log.d(`countCVEByPrjName ${cveId} CALLBACK`);
        //     if (err){
        //         reject(COMMON.buildError(`Failed to get project list for cve ${cveId}`, ERR.ErrFailed, err));
        //     }
        //     else{
        //         // log.d(projects);
        //         var projectList = [];
        //         projects.forEach(prj => {
        //             // log.d(`${module.name}, ${module.moduleVersions}`);
        //             // console.log(module);
        //             projectList.push(db2Item(prj));
        //         })
        //         resolve(projectList);
        //     }
        }); 
    });
}



function countCVEByPrjId(projectId){
    log.d(`countCVEByPrjId ${projectId}`);
    return new Promise((resolve, reject) => {
        var condition = [];
        if (Array.isArray(projectId))
        {
            if (!COMMON.isEmpty(projectId)){
                projectId.forEach(element => {
                    condition.push({projectId:element})
                })
            }
                
        }
        else{
            condition.push({projectId:projectId})
        }
        // THIS_SCHEMA.count({projectId:projectId}, function(err, count) {
        THIS_SCHEMA.count({ $or:condition}, function(err, count) {
            log.d(`countCVEByPrjId callback ${projectId}`);
            if (!err){
                log.d(`Count ${count}`);
                resolve(count);
            }
            else{
                var msg = `Count cve of prj ${projectId} failed. ${err}`;
                log.e(msg);
                reject(COMMON.buildError(msg, ERR.ErrFailed, projectId, err));
            }
        });
    })

}
////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////
// module.exports = project;
module.exports.add = add;
module.exports.countCVEByPrjName = countCVEByPrjName;
module.exports.countCVEByPrjId = countCVEByPrjId;

module.exports.getProjectListOfCve = getProjectListOfCve;
module.exports.getCVEIdByListPrjName = getCVEIdByListPrjName;
module.exports.SCHEMA_NAME = SCHEMA_NAME;
