const { UUID } = require('bson');
var MONGOOSE = require('mongoose')

var ERR = require("../../errno");
var COMMON = require("../../common");

var PROJECT = require('./project_db')

var DB = require('../../db/db');
var CONST = require('../../const');
// var MODULE = require('././module/module_cve_db');

////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////

var log = require("../../log").build("project_cve");
const SCHEMA_NAME = "project_cve";

MONGOOSE.pluralize(null);
var cve_status_schema = new MONGOOSE.Schema({
    cveId:MONGOOSE.ObjectId,
    projectId:MONGOOSE.ObjectId, // project
    // vul_number:String, // vulnerablities id, instead of cve id, as some issue not assign cve number yet
    status:{type:Number, default:DB.STATUS_INACTIVE}, // status: active, on-hold, etc.
    vulStatus:{type: Number, default:CONST.VUL_PRJ_STATUS_NEW}, // opened, skipped, tested, patched
    desc:String,
    note:String,
    patchedDate:Number,
    history:String,
    lastModifiedDate:Number,
    addedDate:Number,
    assignment:String,
    ticket:String,
    metaInfo:String,
    versions:[String], // version of project that vuln/CVE exists
    fixedVersions:[String] // version of project that vuln/CVE was fixed
});

var THIS_SCHEMA = MONGOOSE.model(SCHEMA_NAME, cve_status_schema);

const VUL_STATUS_IN_ACTIVE = 0;

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////
function buildItem(){
    log.d("Build project-cve item");
    return {
        id:null,
        projectId:null,
        cveId:null,
        vulStatus:CONST.VUL_PRJ_STATUS_NEW,
        status:DB.STATUS_INACTIVE,
        toString:function(){
            return `${this.id};${this.cveId};${this.projectId};${this.vulStatus}`;
        },
        
    };
}

function db2Item(db, item = null){    
    if (!item){
        item = buildItem();
    }
    // TODO: validate info

    item.id = db._id;
    item.projectId = db.projectId;
    item.cveId = db.cveId;
    item.vulStatus = db.vulStatus;
    item.status = db.status;
    item.projectName = db.projectName;
    
    
    return item;
}



async function delAllPrjOfVul(vulId){
    return new Promise(async (resolve, reject) => {
        log.d(`delAllPrjOfVul ${vulId}`);
        DB.connectdbsync(null);
        // const result = await THIS_SCHEMA.deleteMany({cveId:vulId});
        // if (result.ok == 1){
        //     log.d(`Deleted ${result.deletedCount} for vul ${vulId}`);
        //     resolve(result.deletedCount);
        // }
        // else{
        //     log.e(`Delete prj of cve ${vulId} failed, result ${result.ok}`);
        //     reject(COMMON.buildError(`Delete prj of cve ${vulId} failed`, ERR.ErrFailed, vulId));
        // }
        THIS_SCHEMA.deleteMany({cveId:vulId}, function(err, result)
        {
            log.d(`delAllPrjOfVul deleteMany finish`);
            if (!err){
                log.raw(result, "result");
                log.d(`delAllPrjOfVul Deleted ${result.deletedCount} for vul ${vulId}`);
                resolve(result.deletedCount);
            }
            else{
                log.e(`delAllPrjOfVul Delete prj of cve ${vulId} failed, result ${err}`);
                reject(COMMON.buildError(`Delete prj of cve ${vulId} failed`, ERR.ErrFailed, vulId, err));
            }
            
        });

    });

}

async function delPrjOfVul(vulId, projectId){
    return new Promise(async (resolve, reject) => {
        log.d(`delPrjOfVul ${vulId}, prj ${projectId}`);
        DB.connectdbsync(null);
        // const result = await THIS_SCHEMA.deleteMany({cveId:vulId, projectId:projectId});
        // if (result.ok == 1){
        //     log.d(`delPrjOfVul Deleted ${result.deletedCount} for vul ${vulId}`);
        //     resolve(result.deletedCount);
        // }
        // else{
        //     log.e(`delPrjOfVul Delete prj of cve ${vulId} failed, result ${result.ok}`);
        //     reject(COMMON.buildError(`Delete prj of cve ${vulId} failed`, ERR.ErrFailed, vulId));
        // }
        THIS_SCHEMA.deleteMany({cveId:vulId, projectId:projectId}, function(err, result)
        {
            log.d(`delPrjOfVul deleteMany finish`);
            if (!err){
                log.raw(result, "result");
                log.d(`delPrjOfVul Deleted ${result.deletedCount} for vul ${vulId}`);
                resolve(result.deletedCount);
            }
            else{
                log.e(`delPrjOfVul Delete prj of cve ${vulId} failed, result ${err}`);
                reject(COMMON.buildError(`Delete prj of cve ${vulId} failed`, ERR.ErrFailed, vulId, err));
            }
            
        });
        

    });

}

function add(projectId, cveId, status=DB.STATUS_NEW, vulStatus = CONST.VUL_PRJ_STATUS_NEW){
    log.i(`add mapping project ${projectId}, cve ${cveId}, status ${status}`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        THIS_SCHEMA.findOne({projectId:projectId, cveId:cveId}, function(err, itemdb){
            log.d(`findOne callback`);
            var ret = ERR.ErrFailed;
            var ret_msg = "Failed";
            if (err){
                log.e(`Add mapping failed ${err}`);
                reject(err);
                return;
            }
            // TODO: add tags
            if (itemdb){ // existed
                log.i(`mapping ${projectId} - ${cveId},already exist`);
                log.d(`Status ${itemdb.vulStatus } vs ${vulStatus}`);
                if (itemdb.vulStatus != vulStatus)
                {
                    log.i(`Update status from ${itemdb.vulStatus } to ${vulStatus}`);
                    itemdb.vulStatus = vulStatus;
                    itemdb.lastModifiedDate = COMMON.currentTimeMs();
                    // TODO: update history?
                    // TODO: add tags
                    ret = ERR.ErrNone;
                    ret_msg = "Update status ok";
                    itemdb.save((err, itemdb2)=>{
                        if (err){
                            log.i(`Update prj-cve  status ok ${err}`);
                            reject(err);
                        }
                        else{
                            log.i(`udate prj-cve status OK`);
                            resolve(db2Item(itemdb2));
                        }
                        
                    });
                    
                }
                else{
                    resolve(db2Item(itemdb));
                }
                
            }
            else{
                            
                var itemdb = new THIS_SCHEMA();
                itemdb.projectId = projectId;
                itemdb.cveId = cveId;
                if (!COMMON.isValidObj(status))
                {
                    status = DB.STATUS_NEW;
                }

                itemdb.status = status;
                if (COMMON.isValidObj(vulStatus))
                {
                    itemdb.vulStatus = vulStatus;
                }
    
                log.i(`Mapping not exist, create new`);
                

                itemdb.addedDate = COMMON.currentTimeMs();
                itemdb.lastModifiedDate = COMMON.currentTimeMs();
                // TODO: update history?
                // TODO: add tags
                ret = ERR.ErrNone;
                ret_msg = "Add new mapping prj-cve OK";
                itemdb.save((err, itemdb2)=>{
                    if (err){
                        log.i(`Add prj-cve map failed ${err}`);
                        reject(err);
                    }
                    else{
                        log.i(`Add prj-cve map OK`);
                        resolve(db2Item(itemdb2));
                    }
                    
                });
                // TODO: handle error case
            }
            
            // if (callback)
            //     callback(ret, this.name, ret_msg);
        });
        // }.bind({nameid:Object.assign({}, nameid), name:Object.assign({}, name), versions:Object.assign({}, versions)}));
    });
}

function getProjectListOfCve(cveId){
    log.d(`getProjectListOfCve ${cveId}`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        THIS_SCHEMA.aggregate([
            {
                $lookup: {
                    from:PROJECT.SCHEMA_NAME, // collection name in db
                    localField: "projectId",
                    foreignField: "_id",
                    as: "projectinfo"
                },
            },
            {   $unwind:"$projectinfo" },
            {
                $match:{
                    $and:[{"cveId" : cveId}]
                }
            },
            {   
                $project:{
                    _id : 1,
                    projectId:1,
                    cveId:1,
                    projectName : "$projectinfo.name",
                    vulStatus : 1,
                } 
            },
    
    ]).exec(function(err, projects) {

        log.d(`getProjectListOfCve ${cveId} CALLBACK`);
            if (err){
                reject(COMMON.buildError(`Failed to get project list for cve ${cveId}`, ERR.ErrFailed, err));
            }
            else{
                // log.d(projects);
                var projectList = [];
                projects.forEach(prj => {
                    // log.d(`${module.name}, ${module.moduleVersions}`);
                    // console.log(module);
                    projectList.push(db2Item(prj));
                })
                resolve(projectList);
            }
        }); 
    });
}


function countCVEByPrjId(projectId){
    log.d(`countCVEByPrjId ${projectId}`);
    return new Promise((resolve, reject) => {
        var condition = [];
        if (Array.isArray(projectId))
        {
            if (!COMMON.isEmpty(projectId)){
                projectId.forEach(element => {
                    condition.push({projectId:element})
                })
            }
                
        }
        else{
            condition.push({projectId:projectId})
        }
        
        THIS_SCHEMA.count({ $or:condition}, function(err, count) {
            log.d(`countCVEByPrjId callback ${projectId}`);
            if (!err){
                log.d(`Count ${count}`);
                resolve(count);
            }
            else{
                var msg = `Count cve of prj ${projectId} failed. ${err}`;
                log.e(msg);
                reject(COMMON.buildError(msg, ERR.ErrFailed, projectId, err));
            }
        });
    })

}


function updateStatusProject(projectId, cveId, status=CONST.VUL_PRJ_STATUS_NEW){
    log.i(`updateStatusProject ${projectId}, cve ${cveId}, status ${status}`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        THIS_SCHEMA.findOne({projectId:projectId, cveId:cveId}, function(err, itemdb){
            log.d(`findOne callback`);
            var ret = ERR.ErrFailed;
            var ret_msg = "Failed";
            if (err){
                reject(err);
                return;
            }
            // TODO: add tags
            if (!itemdb){ // existed
                log.i(`mapping ${projectId} - ${cveId}, not exist`);
                reject(COMMON.buildError(`mapping ${projectId} - ${cveId}, not exist`, ERR.ErrNotFound, cveId));
            }
            else{
                itemdb.vulStatus = status;
                itemdb.lastModifiedDate = COMMON.currentTimeMs();
                
                
                ret_msg = "Add new mapping prj-cve OK";
                itemdb.save((err, itemdb2)=>{
                    if (err){
                        log.i(`Add prj-cve map failed ${err}`);
                        reject(err);
                    }
                    else{
                        log.i(`Add prj-cve map OK`);
                        resolve(cveId);
                    }
                    
                });
                // TODO: handle error case
            }
            
            // if (callback)
            //     callback(ret, this.name, ret_msg);
        });
        // }.bind({nameid:Object.assign({}, nameid), name:Object.assign({}, name), versions:Object.assign({}, versions)}));
    });
}
////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////
// module.exports = project;
module.exports.add = add;
module.exports.updateStatusProject = updateStatusProject;

module.exports.countCVEByPrjId = countCVEByPrjId;

module.exports.getProjectListOfCve = getProjectListOfCve;
module.exports.delAllPrjOfVul = delAllPrjOfVul;
module.exports.delPrjOfVul = delPrjOfVul;

module.exports.SCHEMA_NAME = SCHEMA_NAME;
