////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////

var ERR = require("../../errno");
var COMMON = require("../../common");

var DB = require('../../db/db');
const { UUID } = require('bson');
var MONGOOSE = require('mongoose')
var MODULE = require('../module/module_db')
var PROJECT = require('./project_db')
////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////

var log = require("../../log").build("project_module");

const SCHEMA_NAME = "project_module";

MONGOOSE.pluralize(null);

// project include multiple domain
var projectSchema = new MONGOOSE.Schema({
    // projectId:{ type: MONGOOSE.ObjectId, ref:PROJECT.SCHEMA_NAME}, // Project id, r
    // moduleId: { type: MONGOOSE.ObjectId, ref:MODULE.SCHEMA_NAME}, // 
    projectId:MONGOOSE.ObjectId, // Project id, r
    moduleId:MONGOOSE.ObjectId, // 
    moduleVersions:[String], // version of module which project use
    addedDate:Number,
    lastModifiedDate:Number,
    status:{type:Number, default:DB.STATUS_INACTIVE}, // status: active, on-hold, etc.
});

var PRJ_MODULE = MONGOOSE.model(SCHEMA_NAME, projectSchema);

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////
function buildItem(){
    log.d("Build project-module item");
    return {
        id:null,
        projectId:null,
        moduleId:null,
        moduleVersions:[],
        moduleName:null,
        projectName:null,
        toString:function(){
            return `${this.id};${this.projectId};${this.moduleId};${this.getVersions()}`;
        },
        getVersions:function(){
            var versions = "";
            this.moduleVersions.forEach(element => versions += element + ",");
            return versions;
        }
    };
}

function db2Item(db, item = null){    
    if (!item){
        item = buildItem();
    }
    // TODO: validate info

    item.id = db._id;
    item.projectId = db.projectId;
    item.moduleId = db.moduleId;
    item.moduleName = db.moduleName;
    item.projectName = db.projectName;
    db.moduleVersions.forEach(element => item.moduleVersions.push(element));
    
    return item;
}


function add(projectId, moduleId, moduleVersions){
    log.i(`add mapping project ${projectId}, module ${moduleId}, version ${moduleVersions}`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        PRJ_MODULE.findOne({projectId:projectId, moduleId:moduleId}, function(err, itemdb){
            log.d(`findOne callback`);
            var ret = ERR.ErrFailed;
            var ret_msg = "Failed";
            if (err){
                reject(err);
                return;
            }
            // TODO: add tags
            if (itemdb){ // existed, update other information like version if any
                log.i(`mapping ${projectId} - ${moduleId},already exist, check version ${moduleVersions}`);
                log.d(itemdb.moduleVersions);
                if (!COMMON.isEmpty(moduleVersions)){ // update version
                    if (COMMON.isEmpty(itemdb.moduleVersions)){
                        log.d("Not exist version yet, init one");
                        
                        itemdb.moduleVersions = [];
                        moduleVersions.forEach(element => {
                            itemdb.moduleVersions.push(element.toLowerCase());
                        });
                        ret = ERR.ErrNone;
                        ret_msg = "Add new version OK";
                    }
                    else{
                        moduleVersions.forEach(version => {
                            version = version.toLowerCase();
                            if (!itemdb.moduleVersions.includes(version)){
                                log.d(`Version ${version} not exist, add new one and update db`);
                                itemdb.moduleVersions.push(version);
                                ret = ERR.ErrNone;
                                ret_msg = "Add new version OK";
                            }
                            else{
                                log.e(`Version ${version}  existed`);
                                ret = ERR.ErrExist;
                                ret_msg = `Version ${version} already existed`;
                            }
                        });
                    }
                }
                else{
                    log.e(`Empty version info`);
                    ret = ERR.ErrNone;
                    // ret_msg = "Empty version info";
                }
                if (ret == ERR.ErrNone)
                {
                    itemdb.lastModifiedDate = COMMON.currentTimeMs();
                    itemdb.save((err, module2)=>{
                        if (err){
                            log.i(`Update mapping failed failed ${err}`);
                            reject(err);
                        }
                        else{
                            log.i(`Update prj-module map OK`);
                            resolve(db2Item(module2));
                        }                        
                    });
                    
                    // TODO: handle error case
                }
                else if (ret == ERR.ErrExist){
                    log.i("Version existed, do nothing");
                    resolve(db2Item(itemdb));
                }
                else{
                    reject(new Error(ret_msg));
                }
            }
            else{
                            
                var itemdb = new PRJ_MODULE();
                itemdb.projectId = projectId;
                itemdb.moduleId = moduleId;
    
                log.i(`Mapping not exist, create new`);
                itemdb.moduleVersions = [];
                if (!COMMON.isEmpty(moduleVersions)){
                    log.d("Add module version");
                    moduleVersions.forEach(element => {
                        log.d(`Add version ${element}`);
                        itemdb.moduleVersions.push(element.toLowerCase());
                    });
                }
                else{
                    log.d("No version to add");
                    itemdb.moduleVersions = [];
                }

                itemdb.addedDate = COMMON.currentTimeMs();
                itemdb.lastModifiedDate = COMMON.currentTimeMs();
                // TODO: update history?
                // TODO: add tags
                ret = ERR.ErrNone;
                ret_msg = "Add new module OK";
                itemdb.save((err, module2)=>{
                    if (err){
                        log.i(`Add prj-module map failed ${err}`);
                        reject(err);
                    }
                    else{
                        log.i(`Add prj-module map OK`);
                        resolve(db2Item(module2));
                    }
                    
                });
                // TODO: handle error case
            }
            
            // if (callback)
            //     callback(ret, this.name, ret_msg);
        });
        // }.bind({nameid:Object.assign({}, nameid), name:Object.assign({}, name), versions:Object.assign({}, versions)}));
    });
}

function getModuleListOfProject(projectId){
    log.d(`getModuleListOfProject ${projectId}`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        PRJ_MODULE.aggregate([
            {
                $lookup: {
                    from:MODULE.SCHEMA_NAME, // collection name in db
                    localField: "moduleId",
                    foreignField: "_id",
                    as: "moduleinfo"
                },
            },
            {   $unwind:"$moduleinfo" },
            {
                $match:{
                    $and:[{"projectId" : projectId}]
                }
            },
            {   
                $project:{
                    _id : 1,
                    moduleId:1,
                    moduleVersions:1,
                    moduleName : "$moduleinfo.name",
                } 
            },
    
    ]).exec(function(err, modules) {

        log.d(`getModuleListOfProject ${projectId} CALLBACK`);
            if (err){
                reject(COMMON.buildError(`Failed to get module list for project ${projectId}`, ERR.ErrFailed, err));
            }
            else{
                // log.d(modules);
                var moduleList = [];
                modules.forEach(module => {
                    // log.d(`${module.name}, ${module.moduleVersions}`);
                    // console.log(module);
                    moduleList.push(db2Item(module));
                })
                resolve(moduleList);
            }
        }); 
    });
}


function getProjectListOfModule(moduleId){
    log.d(`getProjectListOfModule ${moduleId}`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        PRJ_MODULE.aggregate([
            {
                $lookup: {
                    from:PROJECT.SCHEMA_NAME, // collection name in db
                    localField: "projectId",
                    foreignField: "_id",
                    as: "projectinfo"
                },
            },
            {   $unwind:"$projectinfo" },
            {
                $match:{
                    $and:[{"moduleId" : moduleId}]
                }
            },
            {   
                $project:{
                    _id : 1,
                    projectId:1,
                    moduleId:1,
                    moduleVersions:1,
                    projectName : "$projectinfo.name",
                } 
            },
    
    ]).exec(function(err, projects) {

        log.d(`getProjectListOfModule ${moduleId} CALLBACK`);
            if (err){
                reject(COMMON.buildError(`Failed to get project list for module ${moduleId}`, ERR.ErrFailed, err));
            }
            else{
                // log.d(projects);
                var projectList = [];
                projects.forEach(prj => {
                    // log.d(`${module.name}, ${module.moduleVersions}`);
                    // console.log(module);
                    projectList.push(db2Item(prj));
                })
                resolve(projectList);
            }
        }); 
    });
}
////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////
// module.exports = project;
module.exports.add = add;
module.exports.getModuleListOfProject = getModuleListOfProject;
module.exports.getProjectListOfModule = getProjectListOfModule;
module.exports.SCHEMA_NAME = SCHEMA_NAME;