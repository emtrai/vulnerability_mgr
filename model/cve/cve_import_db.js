/**
 * Copyright (C) 2022 Anh Huy Ngo - All Rights Reserved
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * Author: Anh Ngo
 * Created Date: 
 */
////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////

const { UUID } = require('bson');
var MONGO = require('mongoose')

var COMMON = require('../../common');
var ERR = require('../../errno');

var DB = require('../../db/db');
////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////
const SCHEMA_NAME = "cve_import";

MONGO.pluralize(null);

// project include multiple domain
var schema = new MONGO.Schema({
    importId:String,
    title:String,
    source:String, // import source (i.e nist, etc.)
    workingDir:String,// workingDir
    author:String,// author (who/user import)
    detail:String,// information
    history:String,// history
    createDate:Number, // date of creation
    lastModified:Number, //
    importStatus:Number,
    status:{type:Number, default:DB.STATUS_INACTIVE},
});

var MODEL = MONGO.model(SCHEMA_NAME, schema);


var log = require("../../log").build("cve_import");

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////
function buildItem(){
    log.d("Build cve-import item");
    return {
        id:null,
        importId:null,
        source:null,
        title:null,
        workingDir:null,
        author:null,
        detail:null,
        createDate:null,
        lastModified:null,
        status:DB.STATUS_INACTIVE,
        importStatus:0,
        toString:function(){
            return `${this.id};${this.importId};${this.importStatus};${this.source};${this.workingDir}`;
        },
    };
}

function db2Item(db, item = null){    
    if (!item){
        item = buildItem();
    }
    // TODO: validate info

    item.id = db._id;
    item.importId = db.importId;
    item.title = db.title;
    item.source = db.source;
    item.createDate = db.createDate;
    item.workingDir = COMMON.getPathFromRoot(db.workingDir);
    item.importStatus = db.importStatus;
    
    return item;
}

function add(title, importId, workingDir, source, importStatus){
    var item = buildItem();
    item.importId = importId; 
    item.title = title; 
    item.workingDir = workingDir; 
    item.source = source; 
    item.importStatus = importStatus; 
    return addItem(item);
}

function updateItem(item){
    log.d(`updateItem: ${item.toString()}`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        MODEL.findOne({importId:item.importId}, function(err, itemdb){
            log.d(`findOne callback`);
            var ret = ERR.ErrFailed;
            var ret_msg = "Failed";
            if (err){
                ret_msg = `Find ${item.importId} failed: ${err}`;
                log.e(ret_msg);
                reject(COMMON.buildError(ret_msg, ret, item, err));
                return;
            }
            // TODO: add tags
            if (itemdb){ // existed, update other information like version if any
                log.d(`Found ${item.importId}`);
                itemdb.title = item.title;
                itemdb.source = item.source;
                itemdb.workingDir = COMMON.getRelLocation(item.workingDir);
                itemdb.importStatus = item.importStatus;
                itemdb.lastModifiedDate = COMMON.currentTimeMs();
                itemdb.save((err, module2)=>{
                    if (err){
                        
                        ret_msg = `Update ${item.importId} to db failed: ${err}`;
                        log.e(ret_msg);
                        reject(COMMON.buildError(ret_msg, ret, item, err));
                    }
                    else{
                        log.i(`Update import to db OK`);
                        resolve(db2Item(itemdb));
                    }                        
                });
            }
            else{
                ret = ERR.ErrNotFound;
                ret_msg = `Not found ${item.importId}`;
                log.e(ret_msg);
                reject(COMMON.buildError(ret_msg, ret, item)); 
                
            }
            
        });
    });
}

function addItem(item)
{
    log.d(`addItem '${item.toString()}'`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        var itemdb = new MODEL();
        itemdb.importId = item.importId;
        itemdb.title = item.title;
        itemdb.source = item.source;
        itemdb.workingDir = COMMON.getRelLocation(item.workingDir);
        itemdb.author = item.author;
        itemdb.detail = item.detail;
        itemdb.importStatus = item.importStatus;
        itemdb.status = DB.STATUS_ACTIVE;
        itemdb.createDate = COMMON.currentTimeMs();
        itemdb.lastModified = COMMON.currentTimeMs();
        itemdb.history = buildhistory("", `Add new ${item.importId}`);
        itemdb.save((err, savedItemDb) => {
            if (err){
                const msg = `save import item ${item.importId} failed`;
                log.e(msg);
                reject(COMMON.buildError(msg, ERR.ErrFailed, item, err));
            }
            else
            {
                if (savedItemDb != null){
                    resolve(db2Item(savedItemDb));
                }
                else{
                    const msg = `save import item ${item.importId} failed, no data`;
                    log.e(msg);
                    reject(COMMON.buildError(msg, ERR.ErrNoData, item));
                }
            }
        });
    });
    
}


function buildhistory(history, msg){
    var new_history = `${history};${COMMON.currentTimeMs()}: ${msg}`;
    // TODO: limit size of history
    return new_history;
}



function get(importId){
    log.d(`get: ${importId}`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        MODEL.findOne({importId:importId}, function(err, itemdb){
            log.d(`get findOne callback`);
            var ret = ERR.ErrFailed;
            var ret_msg = "Failed";
            if (err){
                ret_msg = `Find ${importId} failed: ${err}`;
                log.e(ret_msg);
                reject(COMMON.buildError(ret_msg, ret, importId, err));
                return;
            }
            // TODO: add tags
            if (itemdb){ // existed, update other information like version if any
                log.d(`Found ${importId}`);
                resolve(db2Item(itemdb));
            }
            else{
                ret = ERR.ErrNotFound;
                ret_msg = `Not found ${importId}`;
                log.e(ret_msg);
                reject(COMMON.buildError(ret_msg, ret, importId)); 
                
            }
            
        });
    });
}

function getAll(){
    log.d(`getAll`);
    return new Promise((resolve, reject) => {
        DB.connectdbsync(null);
        MODEL.find({})
            .sort('createDate')
            .exec(function(err, prjs){
                if (!err){
                    var items = [];
                    if (prjs){
                        log.i("Found items");
                        prjs.forEach(function(element){
                            log.i(`found import item ${element.importId}`);
                            var item = db2Item(element);
                            items.push(item);
                            
                        });
                    }
                    else{
                        log.i("not found any cve");
                    }
                    resolve(items);
                }
                else{
                    reject(COMMON.buildError("Get all import failed", ERR.ErrFailed, null, err));
                }
                
                
        });
    });
}


////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////


exports.add = add;
exports.get = get;
exports.getAll = getAll;
exports.addItem = addItem;
exports.updateItem = updateItem;