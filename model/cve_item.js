
var errno = require("../errno");
var log = require("../log").build("cve_item");

SOURCE_NIST="nist";
SOURCE_UNKNOWN="unknow";

const DEFAULT_TAGS = [
    "** disputed **",
    "** reserved **",
    // os
    "linux", 
    "kernel", 
    "android", 
    "windows", 
    "ubuntu", 
    "solaris", 
    "opensuse",
    "ios",
    "ipados",
    "freebsd",
    "debian",
    "ubuntu",
    "pan-os",
    "suse",
    "op-tee",
    //platform
    "mac", 
    "x86", 
    "amd",   
    "arm", 
    "powerpc", 
    "exynos", 
    "aarch64", 
    "snapdragon",
    "s390",
    //module/componen
    "openssl", 
    "busybox", 
    "ntpd", 
    "libc", 
    "curl", 
    "usb", 
    "driver",
    "bash",
    "boost",   
    "gdb",   
    "gimp",   
    "glib",   
    "json",   
    "python",   
    "zip",   
    "gnu",   
    "lib",    
    "crypto",   
    "media",   
    "net",   
    "block",   
    "fs",   
    "sound",   
    "qcom",   
    "drm",   
    "ipv4",   
    "ipv6",   
    "gpu",   
    "xen",
    "router",
    "apache",
    "vpn",
    "firefox",
    "chrome",
    "tcp",
    "udp",
    "netfilter",
    "ssl",
    "tls",
    "ftp",
    "sql",
    "dns",
    "ipc",
    "dll",
    "wifi",
    "wireless",
    "server",
    "java",
    "camera",
    "nfc",
    "bios",
    "graphic",
    "bluetooth",
    ".net",
    "nginx",
    "directX",
    "explorer",
    "vmware",
    "gateway",
    "studio",
    "bz2",
    " rar ",
    "zip",
    "tar",
    "sudo",
    "ldap",
    "selinux",
    "pgp",
    "ssh",
    "v4l",
    "docker",
    "ethernet",
    "boot",
    "gnome",
    "fpu",
    " abi ",
    "tty",
    "serial",
    "grub",
    "uefi",
    "fbcon",
    "virus-detection",
    "tomcat",
    "nfs",
    "unix",
    //vendor
    "adobe",
    "intel",
    "microsoft",
    "cisco",
    "google",
    "dell",
    "nvidia",
    "postgre",
    "samsung",
    "foxit",
    "mediatek",
    "mtk",
    "red hat",
    "ibm",
    //attack   
    "crash",   
    "privilege",   
    "denial",   
    "arbitrary",   
    "root",  
    "remote",  
    "xss",  
    "overflow",  
    "dereference",  
    "use after free",  
    "use-after-free",  
    "out-of-bounds",  
    "injection",  
    "memory",
    "flaw",  
    "bypass",  
    "traversal",
    "disclosure",
    ]


function buildDesc(lang, desc){
    return {
        lang:lang,
        desc:desc
    }
};

exports.buildDesc = buildDesc

exports.addDesc = function(lang, desc, item){
    item.desc.push(buildDesc(lang, desc));
    return item;
}

exports.buildItem = function(source=SOURCE_UNKNOWN){
    log.d("Build cve item");
    return {
        id:null,
        vul_id:null,
        cve_id:null,
        desc:[],
        ref:[],
        tag:[],
        source:source,
        last_modified_date:null,
        added_date:null,
        history:null,
        cve_publishedDate:null,
        cve_lastModifiedDate:null,
        impact:null,
        vectorString:null,
        vectorAttack:null,
        baseScore:0,
        exploitabilityScore:0,
        impactScore:0,
        severity:0
        , poc:null
        , file:null
        , reportedBy:null
        , getDesc:function(){
            var desc = `[${this.source}]`;
            this.desc.forEach(element => desc += element+ "\n");
            return desc;
        }
        , getRef:function(){
            var ref = `[${this.source}] `;
            this.ref.forEach(element => ref += element + "\n");
            return ref;
        }
        , getTag:function(){
            tag = "";
            this.tag.forEach(element => tag += element + ",");
            return tag;
        }
        , buildTag: function(tags = null){

            log.i(`build tags for ${this.vul_id}`);
            var tagsList = [];
            if (tags == null){
                tags = DEFAULT_TAGS;
                log.d("user default tag list");
            }
            desc = this.getDesc();
            desc_lower = desc.toLowerCase();
            tags.forEach(function(element){
                var pos = desc_lower.indexOf(element);
                if (pos >= 0){
                    tagsList.push(element);
                }
            });

            log.d(`Found tags: ${tagsList}`);
            return tagsList;
        },
        
    };
};

exports.SOURCE_NIST = SOURCE_NIST;
