/**
 * Copyright (C) 2022 Anh Huy Ngo - All Rights Reserved
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * Author: Anh Ngo
 * Created Date: 
 */
////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////

var ERR = require("../errno");
var COMMON = require("../common");
var CONFIG = require("../config").Config;
var MONGO = require('mongoose');


////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////


var log = require("../log").build("db");

var dbString = CONFIG.getDbString();

const STATUS_ERR = -2;
const STATUS_DELETED = -1;
const STATUS_NEW = 0; // newly added, not check yet
const STATUS_INACTIVE = 1; // checked, inactive
const STATUS_ACTIVE = 2;// checked, active
const STATUS_ONHOLD = 3;

var ConnectDB = false;

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////

/**
 * Init database
 */
function initDB(){
    log.i(`Init DB, URL ${dbString}`);
    connect();
}

/** 
 * Connect to database
 * @param callback (error, cb)
 * @returns error code. If ErrNone, return result via callback
 */
function connect(callback = null){
    if (!ConnectDB){
        log.i(`connect db ${dbString}`);
        MONGO.connect(dbString);
 
        var db = MONGO.connection;
         
        db.on('error', () => {
            log.e('connection error:')
            ConnectDB = false;
            });
         
        db.once('open', function() {
          log.i("Connection Successful!");
        });
        ConnectDB = true;
    }
    else{
        log.d(`Already connect DB`);
    }
    
}

/**
 * Build query result, unify query return
 * @param {*} items list of queried item
 * @param {*} totals total number of query item
 * @param {*} page page
 * @param {*} perpage item per page
 * @returns 
 */
function buildQueryResult(items=[], totals = 0, page = 0, perpage = 0){
    return {
        items:items, 
        totalitems:totals,
        startIdx:(page-1)*perpage,
        page:page,
        perpage:perpage,
        totalpages:(totals/perpage + (totals%perpage == 0?0:1)) | 0, 
    };
}

function extractQueryResult(result){
    return [result.items, result.totalitems, result.totalpages, result.perpage];
}

////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////

exports.initDB = initDB;
exports.connectdb = connect;
exports.connectdbsync = connect;
exports.buildQueryResult = buildQueryResult;
exports.extractQueryResult = extractQueryResult;

exports.STATUS_ERR = STATUS_ERR;
exports.STATUS_NEW = STATUS_NEW;
exports.STATUS_DELETED = STATUS_DELETED;
exports.STATUS_INACTIVE = STATUS_INACTIVE;
exports.STATUS_ACTIVE = STATUS_ACTIVE;
exports.STATUS_ONHOLD = STATUS_ONHOLD;

exports.toObjId = function(id){
    if (MONGO.isValidObjectId(id)){
        return MONGO.Types.ObjectId(id);
    }
    else{
        return null;
    }
}