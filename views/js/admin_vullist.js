

const PARAM_SEARCH_CONDITION = 'cond';
const PARAM_PAGE = 'page';

var paramlist=[
    ,PARAM_SEARCH_CONDITION
    ,PARAM_PAGE
];

const ID_TXT_KEYWORD = "#textKeyword";
const ID_SELECT_SEARCH_IN="#searchIn";
const ID_SELECT_SEARCH_FIELD="#searchField";
const ID_SELECT_FILTER_PROJECT="#filterProject";
const ID_SELECT_FILTER_MODULE="#filterModule";
const ID_SELECT_FILTER_IMPORT="#filterImport";
const ID_DIV_SEARCH_INFO="#divSearchInfo";
const ID_DIV_QUERY_INFO="#divQueryCondInfo";




const ID_DIALOG_EDIT_TAG = "#dlgUpdateTags";
const ID_TXT_TAGS="#txtTags";
const ID_SPAN_TAGS_DESC="#txtDescTags";
const ID_DIV_TAG_CONTAINER="#divTag_container";




const ID_DIALOG_SPAN_INFO= "#dlgInfo";


var chkAll = false;
var checkList = {};


const VUL_PRJ_STATUS_NEW          = 0; // newly added, not analyze yet
const VUL_PRJ_STATUS_CHECKING     = 1; // analyzing, not finalize status yet
const VUL_PRJ_STATUS_OPEN         = 2; // analyzed, and it's valid vul, need to fix
const VUL_PRJ_STATUS_OPEN_TICKET  = 3; // analyzed, and it's valid vul, need to fix, add ticket (jira, etc.)
const VUL_PRJ_STATUS_SKIP         = 4; // analyzed, and it's invalid vul, no need to fix
const VUL_PRJ_STATUS_PATCHED      = 5; // analyzed, its valid vul, and applied patch
const VUL_PRJ_STATUS_CLOSED       = 6; // analyzed, its valid vul, and fixed

const SUPPORT_VUL_PJ_STATUS = {
    [VUL_PRJ_STATUS_NEW]: "New",
    [VUL_PRJ_STATUS_OPEN]: "Open",
    [VUL_PRJ_STATUS_CHECKING]: "Checking",
    [VUL_PRJ_STATUS_SKIP]: "Skipped",
    [VUL_PRJ_STATUS_PATCHED]: "Patched",
    [VUL_PRJ_STATUS_CLOSED]: "Closed",
}

const UPDATE_ACTION_PROJECT = "project";
const UPDATE_ACTION_MODULE = "module";
const UPDATE_ACTION_TAG = "tag";
const UPDATE_ACTION_STATUS = "status";
const UPDATE_ACTION_PJ_STATUS = "pjstatus";

const UPDATE_ACTION_SET = "set";
const UPDATE_ACTION_ADD = "add";
const UPDATE_ACTION_DEL = "del";
const UPDATE_ACTION_UPDATE = "update";
const UPDATE_ACTION_DEL_ALL = "delall";

function showHide(divid, hide){
    var div = document.getElementById(divid);
    if (div != null){
        div.style.display = hide?"none":"block";
    }
}
function showHideToggle(divid){
    var div = document.getElementById(divid);
    if (div != null){
        
        div.style.display = div.style.display=="block"?"none":"block";
    }
}

var query = false;
var queryId = null;
function doFilter(){
    var param = {};
    query = false;
    queryId = null;
    log("doFilter");
    
    var keyword = $(ID_TXT_KEYWORD).val();
    var prj = $(ID_SELECT_FILTER_PROJECT).val();
    var module = $(ID_SELECT_FILTER_MODULE).val();
    var importid = $(ID_SELECT_FILTER_IMPORT).val();
    
    var cond = [];
    if ((keyword != null) && (keyword != undefined) && (keyword != "")){
        cond.push(`${keyword}|cve|`);
    }

    if ((prj != null) && (prj != undefined) && (prj != "")){
        if (prj != "any")
        {
            cond.push(`${prj}|prj|id`);
        }
    }
    if ((module != null) && (module != undefined) && (module != "")){
        if (module != "any")
        {
            cond.push(`${module}|mod|id`);
        }
    }
    if ((importid != null) && (importid != undefined) && (importid != "")){
        if (importid != "any")
        {
            cond.push(`${importid}|import|`);
        }
    }
    if (cond.length > 0){
        param[PARAM_SEARCH_CONDITION] = cond;
    }
    var url = queryCVE(param);
    if (url != null){

        window.history.pushState(param,"", url);
    }
}

function urlFromDic(paramdic, page = 0){
    var param = "";
    
    $.each(paramdic, function(key, value){
        $.each(value, function(idx, item){
            if (param.length != 0){
                param += "&";
            }
            param += `${key}=${item}`;
        })
        
    });

    if (page > 0){
        if (param.length > 0){
            param += "&";
        }
        param += `page=${page}`;
    }
    
    var parString = "";
    if (param.length > 0){
        parString = `?${param}`;
    }

    var url = `/admin/vullist${parString}`;
    return url;
}

function gotoPage(page){
    var paramdic={};
    var url = new URL(window.location.href);
    var value = url.searchParams.getAll(PARAM_SEARCH_CONDITION);
    if ((value != undefined) && (value != null) && (value.length != 0)){
        paramdic[PARAM_SEARCH_CONDITION] = value;
    }
    
    queryCVE(paramdic, page);
}


function buildPages(page, totalpages, total){

    var pagehtml = "";
    if (totalpages > 0){
        var next = "[Next]";
        var back = "[Back]";
        var paramdic={};
        var url = new URL(window.location.href);
        var value = url.searchParams.getAll(PARAM_SEARCH_CONDITION);
        if ((value != undefined) && (value != null) && (value.length != 0)){
            paramdic[PARAM_SEARCH_CONDITION] = value;
        }
        var paramdiclength = Object.keys(paramdic).length;
        var relurl = urlFromDic(paramdic);

        if (page > 1){
            
            // back = `<a href='${relurl}${paramdiclength > 0?"&":"?"}page=${page-1}'>[Back]</a>`;
            back = `<button  onclick="gotoPage(${page-1})" class="button_link">[Back]</button>`;
        }
        
        if (page < totalpages){
            // next = `<a href='${relurl}${paramdiclength > 0?"&":"?"}page=${page+1}'>[Next]</a>`;
            next = `<button  onclick="gotoPage(${page+1})" class="button_link">[Next]</button>`;
        }
    
        pagehtml = `${back} page ${page}/${totalpages} ${next}`;
    }
   

    return  `${pagehtml} Total: ${total} item(s)`;
}

function updateQueryCondInfo(paramdic){
    var condString = "";
    var idx = 0;
    var length = Object.keys(paramdic).length;
    $.each(paramdic, function(key, value){
        if (key == PARAM_SEARCH_CONDITION)
        {
            condString += `${++idx})Condition:\n`;
            $.each(value, function(idx, item){
                var searchKeyStr = "";
                var searchIn = "";
                var searchField = "";
                [searchKeyStr, searchIn, searchField] = item.split('|');
    
                if (isValidObj(searchKeyStr)){
                    condString += `- Search Key: ${searchKeyStr}\n`;
                }
                if (isValidObj(searchIn)){
                    condString += `- Search In: ${searchIn}\n`;
                }
                if (isValidObj(searchField)){
                    condString += `- Search field: ${searchField}\n`;
                }
                condString += "\n";
            })
        }
        
        
    });
    
    $(ID_DIV_QUERY_INFO).empty().html((length==0?"Query Condition: All\n":condString));

}

function onLoadCVE(data, status, xhdr){
    var tbl = document.getElementById('tblCVE');
    var tblBody = document.getElementById('tbodyCVE');
    var divPage = document.getElementById('divPage');
    
	var cellCount = tbl.rows[0].cells.length; 
    if (data != null){
        
        divPage.innerHTML = buildPages(parseInt(data.page), parseInt(data.totalpages), parseInt(data.total));
    }
    removeAllChildNodes(tblBody);
    var rowCount = 0;
    queryId = data.queryId;
    $.each( data.cves, function( index, value ) {
        // log(`${index}: ${value.desc}`);
        var row = tblBody.insertRow(rowCount++);
        var cellidx = 0;
        var checked = false;
        if (checkList.hasOwnProperty(value.id)){
            checked = checkList[value.id];
        }
        else{
            checked = chkAll;
        }
        row.insertCell(cellidx++).innerHTML = `<input type="checkbox" onclick="onSelectItem(this, '${value.id}')"  ${checked?"checked":""} />`;
        row.insertCell(cellidx++).innerHTML = `<a href='cve?id=${value.id}' target="_blank" rel="noopener noreferrer">${value.idx}</a>`;
        row.insertCell(cellidx++).innerHTML =  `<a href='cve?id=${value.vul_number}' target="_blank" rel="noopener noreferrer">${value.vul_number}</a>`;
        row.insertCell(cellidx++).innerHTML =  `<a href='cve?id=${value.cve_number}' target="_blank" rel="noopener noreferrer">${value.cve_number}</a>`;
        desc_more = null;
        if (value.desc.length <= 200){

            row.insertCell(cellidx++).innerHTML = value.desc;
            desc_more = null;
        }
        else{
            row.insertCell(cellidx++).innerHTML = `${value.desc.substr(0, 200)}<span id="dots_${value.vul_number}">...</span><span id="more_${value.cve_number}" style='display:none'>${value.desc.substr(200)}</span><button  onclick="readmore('${value.vul_number}')" id="btnmore_${value.vul_number}" class="button_link">Read more</button>`;
        }
        

        // row.insertCell(cellidx++).innerHTML = value.source;
        row.insertCell(cellidx++).innerHTML = value.ref;
        // row.insertCell(cellidx++).innerHTML = value.tag;
        allmodule = ""


        value.tags.forEach(tag=>{
            var module_btn = `<a href='list?cond=${tag}|cve|' target="_blank" rel="noopener noreferrer">${tag}</a>`;
            module_btn += ` [<button  onclick="submitTag(this, '${value.id}', '${UPDATE_ACTION_DEL}', '${tag}', false)" class="button_link">X</button>]`;
            
            allmodule += module_btn;
            allmodule += "\n";
        });
        allmodule += `<button  onclick="showUpdateTagDlg('${value.id}', '${value.vul_number}')" class="button_link">Change</button>`;
        row.insertCell(cellidx++).innerHTML = allmodule;


        allmodule = ""


        value.modules.forEach(module=>{
            var module_val = module.moduleName;
            var version = module.moduleVersions;
            if (version.length > 0){
                module_val += `(${version})`;
            }
            var module_btn = `<a href='list?cond=${module.moduleId}|mod|id' target="_blank" rel="noopener noreferrer">${module_val}</a>`;
            module_btn += `[<button  onclick="submitModule(this, '${value.id}', '${UPDATE_ACTION_DEL}', '${module.moduleName}', false)"  class="button_link">X</button>]`;
            
            allmodule += module_btn;
            allmodule += "\n";
        });
        allmodule += `<button  onclick="showUpdateModuleDlg('${value.id}', '${value.vul_number}')"  class="button_link">Change</button>`;
        row.insertCell(cellidx++).innerHTML = allmodule;


        var allprj = "";
        
        value.projects.forEach(prj=>{
            var prj_val = prj.projectName;
            var prjbtn = `<a href='list?cond=${prj.projectId}|prj|id' target="_blank" rel="noopener noreferrer">${prj_val}</a> (${SUPPORT_VUL_PJ_STATUS[prj.vulStatus]})`;
            prjbtn += `[<button  onclick="submitPrj(this, '${value.id}', '${UPDATE_ACTION_DEL}', '${prj.projectId}', false)" class="button_link">X</button>]`;
            prjbtn += `[<button  onclick="showUpdatePrjDlg('${value.id}', '${value.vul_number}', '${prj.projectId}', ${prj.vulStatus})" class="button_link">^</button>]`;
            
            allprj += prjbtn;
            allprj += "\n";
        });
        allprj += `<button  onclick="showUpdatePrjDlg('${value.id}', '${value.vul_number}')"  class="button_link">Change</button>`;
        row.insertCell(cellidx++).innerHTML = allprj;


        var importIdStr = "-";
        if (value.importId != null && value.importId !== undefined)
        {
            importIdStr = `<a href='list?cond=${value.importId}|import|importId' target="_blank" rel="noopener noreferrer">${value.importId.substr(0, 7)}</a>`;
            
        }
        row.insertCell(cellidx++).innerHTML =  importIdStr;

        row.insertCell(cellidx++).innerHTML =  value.status.name + `\n<button  onclick="showUpdateStatusDlg('${value.id}', '${value.vul_number}')" class="button_link">Change</button>`;
     
      });
      
}


function onSelectAll(chk){
    chkAll = chk.checked;
    checkList = {};
    reload();
}

function onSelectItem(chk, id){
    checkList[id] = chk.checked;
}

function readmore(id) {
    var dots = document.getElementById(`dots_${id}`);
    var moreText = document.getElementById(`more_${id}`);
    var btnText = document.getElementById(`btnmore_${id}`);
  
    if (dots.style.display === "none") {
      dots.style.display = "inline";
      btnText.innerHTML = "Read more"; 
      moreText.style.display = "none";
    } else {
      dots.style.display = "none";
      btnText.innerHTML = "Read less"; 
      moreText.style.display = "inline";
    }
}

function onLoadCVEErr(request, status, error){
    log("onSubmitErr");
    
}

function queryCVE(paramdic, page = 0){
    log(`QueryCVE ${queryId}`);
    updateQueryCondInfo(paramdic);
    var url = urlFromDic(paramdic, page);
    var data = {
        queryId:queryId,
    }


    $.ajax(url, {
        contentType: "application/json",
        dataType: 'json',
        type:'POST',
        data: JSON.stringify (data) ,
        success:onLoadCVE,

        error: onLoadCVEErr
    })
    window.history.pushState(paramdic,"", url);
    
}
function getTags(ele){
    var spantags = $(ele).find("span");
    var tags = [];
    $.each(spantags, function(idx, ele){
        tags.push(ele.innerText);
    });
    return tags;
}


function onSubmitSuccess(data){
    showInfo(data.msg, true);
    reload();
}
function onSubmitErr(request, status, error){
    var msg = `${status}, ${error}, ${request.status}, ${request.responseText}`;
    showInfo(msg, true);
}

function submitEdit(self, 
    id, 
    field, 
    action, 
    modules=null, 
    projects=null, 
    tags=null, 
    status=null, 
    pjStatus=null)
{

    // var id = $(dlgId).data('id');
    // var modules = $(dlgId).data('modules');
    // var projects = $(dlgId).data('projects');
    // var tags = $(dlgId).data('tags');
    
    var idList = [];
    var skipIdList = [];
    
    var isAll = chkAll;

    if (isValidObj(id)){
        idList.push(id);
        isAll = false;
    }
    else{
        Object.keys(checkList).forEach(key => {
            if (!checkList[key]){
                skipIdList.push(key);
            }
            else{
                idList.push(key);
            }
        });
    }

    // var tags = getTags(dlgContainer);
    
    var data = {
        queryId:queryId,
        isAll:isAll,
        skipIdList:skipIdList,
        idList:idList,
        field:field,
        action:action,
        projects:projects,
        modules:modules,
        tags:tags,
        status:status,
        pjStatus:pjStatus,
    }

    showInfo(`Updating '${field}', action ${action}`);

    log(`Submit ${JSON.stringify (data)}`);
    $.ajax({
        type: 'POST',
        url: `/admin/vullist?action=edit`,
        data: JSON.stringify (data) ,
        success: onSubmitSuccess,
        error: onSubmitErr,
        contentType: "application/json",
        dataType: 'json'
    });
    
}


function submitTag(self, id, action, tag, fromdlg){
    // var id = null;
    
    var tags = []
    if (fromdlg)
    {
        tags = getTags(ID_DIV_TAG_CONTAINER);
        id = $(ID_DIALOG_EDIT_TAG).data('id');
    }
    else if (isValidObj(tag))
        tags.push(tag);
    log(`id ${id}`);

    submitEdit(self, id, UPDATE_ACTION_TAG, action, null, null, tags, null, null);
}
function showUpdateTagDlg(id = null, vul_number=null){
    $(ID_DIALOG_EDIT_TAG).dialog({
        title: "Edit Tag",
    });
    var desc = "Update Tags for Selected Vulnerabilities";
    if (vul_number != null){
        desc = `Update Tag for Vul ${vul_number}`;
    }
    $(ID_SPAN_TAGS_DESC).empty().html(desc);
    
    $(ID_TXT_TAGS).val("");
    $(ID_DIV_TAG_CONTAINER).empty();
    

    $(ID_DIALOG_EDIT_TAG)
        .data("id", id)
        .data("vul_number", vul_number)
        .dialog("open");
        
}

function initUpdateTagDlg(){
    $(ID_TXT_TAGS).on(
        {
            focusout: function(){
                var tagstr = this.value.replace(/[^a-zA-Z0-9\_\+\-\#\.\:]/i, '');
                if (tagstr){
                    $("<span/>", {
                        text:tagstr,
                        appendTo:ID_DIV_TAG_CONTAINER,
                        class:"dashfolio-tag"
                    });
    
                }
                this.value="";
            },
            keyup:function(ev){
                if (/188|13/.test(ev.which)) $(this).focusout();  
            }
        });
    
    $(ID_DIV_TAG_CONTAINER).on('click', 'span', function() {
        $(this).remove(); 
        });
        
    $( ID_DIALOG_EDIT_TAG ).dialog({
        autoOpen: false,
        modal: true,
        buttons: {
            "Add": function() {
            $(ID_DIALOG_EDIT_TAG).dialog( "close" );
                submitTag(this, null, UPDATE_ACTION_ADD, null, true);
            },
            "Set": function() {
            $(ID_DIALOG_EDIT_TAG).dialog( "close" );
                submitTag(this, null, UPDATE_ACTION_SET, null, true);
            },
            "Delete": function() {
            $(ID_DIALOG_EDIT_TAG).dialog( "close" );
                submitTag(this, null, UPDATE_ACTION_DEL, null, true);
            },
            Cancel: function() {
            $(ID_DIALOG_EDIT_TAG).dialog( "close" );
            }
        }
        });

    
}
///

const ID_DIALOG_EDIT_MODULE = "#dlgUpdateModules";
const ID_TXT_MODULE="#txtModule";
const ID_SPAN_MODULE_DESC="#txtDescModules";
const ID_DIV_MODULE_CONTAINER="#divModule_container";

function submitModule(self, id, action, module, fromdlg){
    // var id = null;
    
    var modules = []
    if (fromdlg)
    {
        modules = getTags(ID_DIV_MODULE_CONTAINER);
        id = $(ID_DIALOG_EDIT_MODULE).data('id');
    }
    else if (isValidObj(module))
    modules.push(module);
    log(`id ${id}`);

    submitEdit(self, id, UPDATE_ACTION_MODULE, action, modules, null, null, null, null);
}
function showUpdateModuleDlg(id = null, vul_number=null){
    $(ID_DIALOG_EDIT_MODULE).dialog({
        title: "Edit Module",
    });
    var desc = "Update Modules for Selected Vulnerabilities";
    if (vul_number != null){
        desc = `Update Modules for Vul ${vul_number}`;
    }
    $(ID_SPAN_MODULE_DESC).empty().html(desc);
    
    $(ID_TXT_MODULE).val("");
    $(ID_DIV_MODULE_CONTAINER).empty();
    

    $(ID_DIALOG_EDIT_MODULE)
        .data("id", id)
        .data("vul_number", vul_number)
        .dialog("open");
        
}

function initUpdateModuleDlg(){
    $(ID_TXT_MODULE).on(
        {
            focusout: function(){
                var tagstr = this.value.replace(/[^a-zA-Z0-9\_\+\-\#\.\:]/i, '');
                if (tagstr){
                    $("<span/>", {
                        text:tagstr,
                        appendTo:ID_DIV_MODULE_CONTAINER,
                        class:"dashfolio-tag"
                    });
    
                }
                this.value="";
            },
            keyup:function(ev){
                if (/188|13/.test(ev.which)) $(this).focusout();  
            }
        });
    
    $(ID_DIV_MODULE_CONTAINER).on('click', 'span', function() {
        $(this).remove(); 
        });
        
    $( ID_DIALOG_EDIT_MODULE ).dialog({
        autoOpen: false,
        modal: true,
        buttons: {
            "Add": function() {
            $(ID_DIALOG_EDIT_MODULE).dialog( "close" );
                submitModule(this, null, UPDATE_ACTION_ADD, null, true);
            },
            "Set": function() {
            $(ID_DIALOG_EDIT_MODULE).dialog( "close" );
                submitModule(this, null, UPDATE_ACTION_SET, null, true);
            },
            "Delete": function() {
            $(ID_DIALOG_EDIT_MODULE).dialog( "close" );
                submitModule(this, null, UPDATE_ACTION_DEL, null, true);
            },
            Cancel: function() {
            $(ID_DIALOG_EDIT_MODULE).dialog( "close" );
            }
        }
        });

    
}

///


const ID_DIALOG_EDIT_PRJ = "#dlgUpdateProject";
const ID_SPAN_PRJDESC="#txtDescProject";
const ID_OPT_PRJ="#opPrj";
const ID_OPT_PRJ_STATUS="#optPrjStatus";

function deselectAllPrj(){
    $(ID_OPT_PRJ).val([]);
}

function submitPrj(self, id, action, prj, fromdlg){
    // var id = null;
    
    var projects = []
    if (fromdlg)
    {
        projects = $(ID_OPT_PRJ).val() || [];
        pjStatus = $(ID_OPT_PRJ_STATUS).val() || null;
        if (pjStatus == "none")
        {
            pjStatus = null;
        }
        id = $(ID_DIALOG_EDIT_PRJ).data('id');
    }
    else if (isValidObj(prj))
        projects.push(prj);

    log(`id ${id}`);
    log(projects);
    log(pjStatus);

    submitEdit(self, id, UPDATE_ACTION_PROJECT, action, null, projects, null, null, pjStatus);
}
function showUpdatePrjDlg(id = null, vul_number=null, prjId = null, pjStatus = null){
    $(ID_DIALOG_EDIT_PRJ).dialog({
        title: "Edit Project",
    });
    var desc = "Update Project for Selected Vulnerabilities";
    if (vul_number != null){
        desc = `Update Project for Vul ${vul_number}`;
    }
    $(ID_OPT_PRJ).val([]);
    $(ID_OPT_PRJ_STATUS).val("none");
    if (isValidObj(prjId)){
        $(ID_OPT_PRJ).val(prjId);
    }
    if (isValidObj(pjStatus)){
        $(ID_OPT_PRJ_STATUS).val(pjStatus);
    }
    $(ID_SPAN_PRJDESC).empty().html(desc);
    
    

    $(ID_DIALOG_EDIT_PRJ)
        .data("id", id)
        .data("vul_number", vul_number)
        .dialog("open");
        
}


function initUpdatePrjDlg(){
    
    
    $( ID_DIALOG_EDIT_PRJ ).dialog({
        autoOpen: false,
        modal: true,
        buttons: {
            "Add": function() {
            $(ID_DIALOG_EDIT_PRJ).dialog( "close" );
                submitPrj(this, null, UPDATE_ACTION_ADD, null, true);
            },
            "Set": function() {
            $(ID_DIALOG_EDIT_PRJ).dialog( "close" );
                submitPrj(this, null, UPDATE_ACTION_SET, null, true);
            },
            "Delete": function() {
            $(ID_DIALOG_EDIT_PRJ).dialog( "close" );
                submitPrj(this, null, UPDATE_ACTION_DEL, null, true);
            },
            "Update Status": function() {
            $(ID_DIALOG_EDIT_PRJ).dialog( "close" );
                submitPrj(this, null, UPDATE_ACTION_UPDATE, null, true);
            },
            Cancel: function() {
            $(ID_DIALOG_EDIT_PRJ).dialog( "close" );
            }
        }
        });

    
}

///

const ID_DIALOG_EDIT_STATUS = "#dlgUpdateStatus";
const ID_SPAN_STATUS_DESC="#txtDescStatus";
const ID_OPT_STATUS="#optStatus";



function submitStatus(self, id, action, status, fromdlg){
    // var id = null;
    
    
    if (fromdlg)
    {
        
        status = $(ID_OPT_STATUS).val() || null;
        if (status == "none")
        {
            status = null;
        }
        id = $(ID_DIALOG_EDIT_STATUS).data('id');
    }
    

    log(`id ${id}`);
    log(status);
    

    submitEdit(self, id, UPDATE_ACTION_STATUS, action, null, null, null, status, null);
}
function showUpdateStatusDlg(id = null, vul_number=null, status = null){
    $(ID_DIALOG_EDIT_STATUS).dialog({
        title: "Edit Status",
    });
    var desc = "Update Status for Selected Vulnerabilities";
    if (vul_number != null){
        desc = `Update Status for Vul ${vul_number}`;
    }
    
    $(ID_OPT_STATUS).val("none");

    
    if (isValidObj(status)){
        $(ID_OPT_STATUS).val(pjStatus);
    }
    $(ID_SPAN_STATUS_DESC).empty().html(desc);
    

    $(ID_DIALOG_EDIT_STATUS)
        .data("id", id)
        .data("vul_number", vul_number)
        .dialog("open");
        
}


function initUpdatePrjDlg(){
    
    
    $( ID_DIALOG_EDIT_STATUS ).dialog({
        autoOpen: false,
        modal: true,
        buttons: {
            
            "Set": function() {
            $(ID_DIALOG_EDIT_STATUS).dialog( "close" );
                submitStatus(this, null, UPDATE_ACTION_SET, null, true);
            },
            
            Cancel: function() {
            $(ID_DIALOG_EDIT_STATUS).dialog( "close" );
            }
        }
        });

    
}
///
const ID_SPAN_INFO="#spanInfo"
function showInfo(html, allowClose=false){
    if (allowClose){
        $( ID_DIALOG_SPAN_INFO ).dialog({
            buttons: [
              {
                text: "Close",
                click: function() {
                  $( this ).dialog( "close" );
                }
              }
            ]
          });
    }
    else{
        $( ID_DIALOG_SPAN_INFO ).dialog({
            buttons: null
          });
    }
    $(ID_SPAN_INFO).html(html);
    $(ID_DIALOG_SPAN_INFO).dialog("open");
}
function hideInfo(){
    $(ID_DIALOG_SPAN_INFO)
    .dialog("close");
}

function initInfoDlg(){
    
    $( ID_DIALOG_SPAN_INFO ).dialog({
        autoOpen: false,
        height: "auto",
        width: "auto",
        modal: true,
        draggable: false,
        // dialogClass: "no-close",
        dialogClass: "no-titlebar",
      });
}

function initLayout(){
   
    $( ID_DIALOG_SPAN_INFO ).dialog({
        autoOpen: false,
        height: "auto",
        width: "auto",
        modal: true,
        draggable: false,
        // dialogClass: "no-close",
        dialogClass: "no-titlebar",
        });

    initUpdateTagDlg();
    initUpdatePrjDlg();
    initUpdateModuleDlg();
}

// jQuery(function(){


    
// })

function reload(){
    var url = new URL(window.location.href);

    var param = {};
    paramlist.forEach(function(element){
        var value = url.searchParams.getAll(element);
        if ((value != undefined) && (value != null) && (value.length != 0)){
            param[element] = value;
        }
    });
    
    queryCVE(param);
}
$(document).ready(function() {

    initLayout();

    reload();
});
