/**
 * Copyright (C) 2022 Anh Huy Ngo - All Rights Reserved
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * Author: Anh Ngo
 * Created Date: 
 */
////////////////////////////////////////////////////////////////////
// MODULE LOADING
////////////////////////////////////////////////////////////////////

var ERR = require("../errno");
var COMMON = require("../common")
const fs = require("fs");
var log = require("../log").build("nist_importer");
var CVEITEM = require("../model/cve/cve_item");
var CVE = require("../model/cve/cve_db");

var DB = require('../db/db');
var CVE_CTRL = require("../controller/cve_ctrl");
var CVE_IMPORT_CTRL = require("../controller/cve_import_ctrl");
var PROJECT_CVE_DB = require("../model/project/project_cve_db");
var MODULE_CVE_DB = require("../model/module/module_cve_db");
var PROJECT_MODULE_DB = require("../model/project/project_module_db");

const {
    isMainThread, parentPort, workerData
  } = require('worker_threads');



////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////


const JSON_CVE_ITEM = "CVE_Items";
const JSON_CVE = "cve";
const JSON_CVE_DATA_META = "CVE_data_meta";
const JSON_ID = "ID";
const JSON_DESC = "description";
const JSON_DESC_DATA = "description_data";
const JSON_LANG = "lang";
const JSON_VAL = "value";
const JSON_REF = "references";
const JSON_REF_DATA = "reference_data";
const JSON_URL = "url";
const JSON_TAGS = "tags";
const JSON_IMPACT = "impact";
const JSON_METRICV3 = "baseMetricV3";
const JSON_CVSSV3 = "cvssV3";
const JSON_PUBLISH_DATE = "publishedDate";
const JSON_LAST_MODIFIED_DATE = "lastModifiedDate";
const JSON_EXPLOIT_SCORE = "exploitabilityScore";
const JSON_IMPACT_SCORE = "impactScore";
const JSON_VECTOR = "vectorString";
const JSON_VECTOR_ATTACK = "attackVector";
const JSON_BASE_SCORE = "baseScore";
const JSON_BASE_SERVERITY = "baseSeverity";
// const JSON_TAGS = "tags";

////////////////////////////////////////////////////////////////////
// FUNCTION
////////////////////////////////////////////////////////////////////

// callback is called when return of function is ErrPending
// onItemCallback(item)
// onFinishCallback(errorcode, numberOfItems)
 function parse(req){
    var fpath = req.path;
    log.i(`Parse nist ${fpath}`);
    log.d(fpath);
    var sum = CVE_IMPORT_CTRL.buildSummarizeInfo();
    return new Promise((resolve, reject) => {
        var ret = ERR.ErrFailed;
        sum.startTime = COMMON.currentTimeMs();

        sum.title = req.title;
        try{
            if (fs.existsSync(fpath)){
                fs.readFile(fpath, 'utf-8', function(err, data){
                    if (err){
                        throw err; // TODO: correct this
                    }
                    var obj = JSON.parse(data); // TODO: large file handling
                    if (obj != null){
                        if (obj.hasOwnProperty(JSON_CVE_ITEM)){
                            var jitems = obj[JSON_CVE_ITEM];
                            if (jitems != null){
                                var requests = jitems.map(function(jitem){
    
                                    var item = CVEITEM.buildItem(CVEITEM.SOURCE_NIST);

                                    if (jitem.hasOwnProperty(JSON_CVE)){
                                        var jcve = jitem[JSON_CVE];
    
                                        // CVE information, such as id
                                        if (jcve.hasOwnProperty(JSON_CVE_DATA_META)){
                                            var jcve_data_meta = jcve[JSON_CVE_DATA_META];
                                            if (jcve_data_meta.hasOwnProperty(JSON_ID)){
                                                var jid = jcve_data_meta[JSON_ID];
                                                log.d(`CVE ID ${jid}`);
                                                
                                                item.cve_number = jid;
                                                item.vul_number = jid;
                                                
                                            }
                                        }
                                        // TODO: no cve id?
                                        
    
                                        // reference
                                        if (jcve.hasOwnProperty(JSON_REF)){
                                            log.d(`>> ${item.cve_number} parse ref`);
                                            var jobj = jcve[JSON_REF];
                                            if (jobj.hasOwnProperty(JSON_REF_DATA)){
                                                var jitems = jobj[JSON_REF_DATA];
                                                if (jitems != null){
                                                    jitems.forEach(function(jitem){
                                                        var url = "";
                                                        if (jitem.hasOwnProperty(JSON_URL)){
                                                            url = jitem[JSON_URL];
                                                        }
                                                        var tag = "";
    
                                                        if (jitem.hasOwnProperty(JSON_TAGS)){
                                                            tag = jitem[JSON_TAGS];
                                                        }
                                                        var urltag = `${url} [${tag}]`;
                                                        log.d(`${jid} url ${urltag}`);
                                                        item.ref.push(urltag);
                                                    });
                                                }
                                                else{
                                                    log.d(`${jid} not found data in ${JSON_REF_DATA}`);
                                                }
                                            }
                                            else{
                                                log.d(`${jid} not found ${JSON_REF_DATA}`);
                                            }
                                        }
                                        else{
                                            log.d(`${jid} not found ${JSON_REF}`);
                                        }
    
                                        // description
                                        if (jcve.hasOwnProperty(JSON_DESC)){
                                            log.d(`>> ${item.cve_number} parse ${JSON_DESC}`);
                                            var jobj = jcve[JSON_DESC];
                                            if (jobj.hasOwnProperty(JSON_DESC_DATA)){
                                                var jitems = jobj[JSON_DESC_DATA];
                                                if (jitems != null){
                                                    jitems.forEach(function(jitem){
                                                        var lang = "";
                                                        if (jitem.hasOwnProperty(JSON_LANG)){
                                                            lang = jitem[JSON_LANG];
                                                        }
                                                        var desc = "";
    
                                                        if (jitem.hasOwnProperty(JSON_VAL)){
                                                            desc = jitem[JSON_VAL];
                                                        }
                                                        var tmpdesc = `[${lang}] ${desc}`;
                                                        log.d(`${jid}  desc ${tmpdesc} `);
                                                        item.desc.push(tmpdesc);
                                                    });
                                                }
                                            }
                                        }
    
    
                                        // last publish date
                                        if (jitem.hasOwnProperty(JSON_PUBLISH_DATE)){
                                            log.d(`>> ${item.cve_number} parse ${JSON_PUBLISH_DATE}`);
                                            item.cve_publishedDate = jitem[JSON_PUBLISH_DATE];
                                        }
    
                                        // last modified date
                                        if (jitem.hasOwnProperty(JSON_LAST_MODIFIED_DATE)){
                                            log.d(`>> ${item.cve_number} parse ${JSON_LAST_MODIFIED_DATE}`);
                                            item.cve_lastModifiedDate = jitem[JSON_LAST_MODIFIED_DATE];
                                        }
    
                                        item.added_date = COMMON.currentTimeMs();
                                        item.last_modified_date = COMMON.currentTimeMs();
                                        // impact
                                        if (jitem.hasOwnProperty(JSON_IMPACT)){
                                            log.d(`>> ${item.cve_number} parse ${JSON_IMPACT}`);
                                            var jobj = jitem[JSON_IMPACT];
                                            item.impact = JSON.stringify(jobj);
    
                                            if (jobj.hasOwnProperty(JSON_METRICV3)){
                                                log.d(`>> ${item.cve_number} parse ${JSON_METRICV3}`);
                                                var jmetric = jobj[JSON_METRICV3];
                                                if (jmetric.hasOwnProperty(JSON_CVSSV3)){
                                                    log.d(`>> ${item.cve_number} parse ${JSON_CVSSV3}`);
    
                                                    var jcvss = jmetric[JSON_CVSSV3];
                                                    if (jcvss.hasOwnProperty(JSON_VECTOR)){
                                                        log.d(`>> ${item.cve_number} parse ${JSON_VECTOR}`);
                                                        item.vectorString = jcvss[JSON_VECTOR];
                                                    }
                                                    if (jcvss.hasOwnProperty(JSON_VECTOR_ATTACK)){
                                                        log.d(`>> ${item.cve_number} parse ${JSON_VECTOR_ATTACK}`);
                                                        item.vectorAttack = jcvss[JSON_VECTOR_ATTACK];
                                                    }
                                                    if (jcvss.hasOwnProperty(JSON_BASE_SCORE)){
                                                        log.d(`>> ${item.cve_number} parse ${JSON_BASE_SCORE}`);
                                                        item.baseScore = jcvss[JSON_BASE_SCORE];
                                                    }
                                                    if (jcvss.hasOwnProperty(JSON_BASE_SERVERITY)){
                                                        log.d(`>> ${item.cve_number} parse ${JSON_BASE_SERVERITY}`);
                                                        item.severity = jcvss[JSON_BASE_SERVERITY];
                                                    }
                                                }
                                                if (jmetric.hasOwnProperty(JSON_EXPLOIT_SCORE)){
                                                    log.d(`>> ${item.cve_number} parse ${JSON_EXPLOIT_SCORE}`);
                                                    item.exploitabilityScore = jmetric[JSON_EXPLOIT_SCORE];
                                                }
                                                if (jmetric.hasOwnProperty(JSON_IMPACT_SCORE)){
                                                    log.d(`>> ${item.cve_number} parse ${JSON_IMPACT_SCORE}`);
                                                    item.impactScore = jmetric[JSON_IMPACT_SCORE];
                                                }
                                                
                                            
                                            }
                                            // TODO: baseMetricV2
                                        }
                                    }
                                    CVEITEM.analyzeItem(item);
                                    log.d(`Add cve ${item.vul_number} to db`);
                                    sum.total += 1;
                                    item.importId = req.id;
                                    return new Promise((resolve, reject) => {
                                        log.d(`Add to cve db`);
                                        CVE_CTRL.addCVE(item)
                                        .then(item => {
                                            log.d(`Add to cve db done, check to add prj-cve`);
                                            log.d(`CVE ${item.toString()}`);
                                            return new Promise((res, rej)=>{
                                                log.dumpArray(req.projects, "req.projects");
                                                // check to add project
                                                if (!COMMON.isEmpty(req.projects))
                                                {
                                                    var addreqs = req.projects.map(prjId => {
                                                        log.d(`Add prj - cve ${prjId} ${item.id}`);
                                                        return PROJECT_CVE_DB.add(prjId, item.id);
                                                    })

                                                    Promise.all(addreqs).then(()=>{
                                                        log.d(`All project - cve added`);
                                                        res(item);
                                                    })
                                                    .catch(err => {
                                                        rej(err);
                                                    });
                                                }
                                                else{
                                                    log.d(`No project to add,next`);
                                                    res(item);                                         
                                                }
                                            })
                                            
                                            // resolve(item);      

                                        })
                                        .then(item => {
                                            log.d(`Add to prj-cve db done, check to add module-cve`);
                                            return new Promise((res, rej) => {
                                                // check to add module
                                                if (!COMMON.isEmpty(req.modules))
                                                {
                                                    log.d(`Add module-cve`);
                                                    // console.log(req.modules);
                                                    var addreqs = req.modules.map(ele => {
                                                        log.d(`Add module - cve ${ele.id}, ${ele.versions} - ${item.id}`);
                                                        return MODULE_CVE_DB.add(item.id, ele.id, ele.versions);
                                                    })

                                                    Promise.all(addreqs).then(()=>{
                                                        log.d(`All module - cve added`);
                                                        res(item);
                                                    })
                                                    .catch(err => {
                                                        rej(err);
                                                    })
                                                    ;
                                                }
                                                else{
                                                    log.d(`No module - cve to add,next`);
                                                    res(item);                                         
                                                }
                                            })
                                            
                                        })
                                        .then(item => {
                                            
                                            log.d(`Add to module-cve db done, check to add module-prj`);
                                            // check to add module
                                            if (!COMMON.isEmpty(req.modules) && !COMMON.isEmpty(req.projects))
                                            {
                                                var addreqs = [];
                                                req.projects.forEach(prjId => {
                                                    req.modules.forEach(module => {
                                                        log.d(`Add module - prj ${module.id}, ${module.versions} - ${prjId}`);
                                                        addreqs.push(PROJECT_MODULE_DB.add(prjId, module.id, module.versions));
                                                    })
                                                })

                                                Promise.all(addreqs).then(()=>{
                                                    log.d(`All module - prj added`);
                                                    resolve(item);
                                                });
                                            }
                                            else{
                                                resolve(item);     
                                                log.d(`No module - prj to add,next`);                                    
                                            }
                                        })
                                        .catch(err => {
                                            log.e(`Add cve to db failed ${err}`);
                                            reject(err);
                                        })
                                        ;
                                    });
                                    
                                });
    
                                Promise.allSettled(requests)
                                    .then((results) => {
                                        results.forEach(result=>
                                            {
                                                
                                                var logitem = CVE_IMPORT_CTRL.buildImportVulInfo();
                                                var cveitem = null;
                                                log.d(`Import CVE result ${result.status}`);
                                                if (result.status == "rejected"){
                                                    sum.skipped += 1;
                                                    // TODO: check Error type
                                                    var [msg, code, data] = COMMON.parseError(result.reason);
                                                    // log.e(`${msg} ${data.toString()}`);
                                                    cveitem = data;
                                                    if (code == ERR.ErrExist)
                                                        logitem.status = CVE_IMPORT_CTRL.IMPORT_VUL_STATUS_DUP;
                                                    else
                                                        logitem.status = CVE_IMPORT_CTRL.IMPORT_VUL_STATUS_ERR;
                                                    logitem.result = code;
                                                    logitem.msg = msg;
                                                }
                                                else{
                                                    sum.added += 1;
                                                    cveitem = result.value;
                                                    logitem.status = CVE_IMPORT_CTRL.IMPORT_VUL_STATUS_ADDED;
                                                    logitem.result = ERR.ErrNone;

                                                }
                                                logitem.createdTime = COMMON.currentTimeMs();
                                                if (cveitem){
                                                    logitem.vulId = cveitem.vul_number;
                                                    logitem.cveId = cveitem.cve_number;
                                                    logitem.id = cveitem.id;
                                                }
                                                    
                                                CVE_IMPORT_CTRL.appendLogVulImportInfo(req, logitem, null);

                                            }
                                        );
                                        sum.result = ERR.ErrNoData;
                                        resolve(sum);
                                    })
                                    .catch((err) => {
                                        log.e(`Imported CVE faild all ${err}`);
                                        sum.result = ERR.ErrFailed;
                                        sum.msg = `Imported CVE faild all ${err}`;
                                        reject (COMMON.buildError("Imported CVE faild all", ERR.ErrFailed, sum));
                                    })
                                    ;
                                // Promise.all(requests)
                                //     .then(()=>{
                                //         resolve(ERR.ErrNone);
                                //         // if (onFinishCallback != null) {
                                //         //     log.d("call finish callback");
                                //         //     resolve(ERR.ErrNone);
                                //         // }
                                //     })
                                //     .catch(err => {
                                //         reject (err);
                                //     })
                                //     ;
                            }
                        }
                    }
                });
            }
            else{
                reject(COMMON.buildError("File not exist", ERR.ErrNotExist, sum));
            }
        }
        catch (err){
            log.i(err);
            reject(COMMON.buildError("Exception when parsing file", ERR.ErrException, sum, err));
        }
    });
}

////////////////////////////////////////////////////////////////////
// MODULE EXPORT
////////////////////////////////////////////////////////////////////

module.exports.parse = parse;

 

if (!isMainThread){
    var ret = DB.connectdbsync(null);
    log.d("in worker thread, start parsing");
    var req = workerData.req;
    log.d(`Parse request ${CVE_IMPORT_CTRL.importReqString(req)}`);
    parse(req)
        .then(function(sum){
            log.d(`Imported finished, write summarize info for request ${CVE_IMPORT_CTRL.importReqString(req)}`);
            sum.importId = req.id;
            sum.workDir = req.workingDir;
            sum.endTime = COMMON.currentTimeMs();
            return new Promise((resolve, reject) => {
                CVE_IMPORT_CTRL.writeImportSummarize(req, sum, function(err){
                    if (!err){
                        resolve(sum);
                    }
                    else{
                        reject(err);
                    }
                })
            });
        })
        .then((sum) => {
            log.d("Write import summarize finished, return to main process");
            req.result = sum.result;
            req.added = sum.added;
            req.skipped = sum.skipped;
            req.state = CVE_IMPORT_CTRL.IMPORT_STATE_DONE;
            req.lastUpdated = COMMON.currentTimeMs();
            log.d(`on finish callback ${CVE_IMPORT_CTRL.importReqString(req)}`);
            parentPort.postMessage(req);
            })
        .catch((err) => {
            log.d(`Import Failed all ${err}`);
            req.result = ERR.ErrFailed;
            req.resultMsg = `Import failed: ${err}`;
            req.state = CVE_IMPORT_CTRL.IMPORT_STATE_ERROR;
            req.lastUpdated = COMMON.currentTimeMs();
            log.d(`on finish callback ${CVE_IMPORT_CTRL.importReqString(req)}`);
            parentPort.postMessage(req);
         })
        ;
    
}
// parentPort.on("message", (limit) => {
//     const result = parse(limit);    
//     parentPort.postMessage(result);
//    });